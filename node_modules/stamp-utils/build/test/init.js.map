{"version":3,"sources":["../../src/test/init.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,oBAAK,QAAL,EAAe,gBAAQ;AACrB,OAAK,IAAL,CAAU,wBAAV,EAAoC,kBAAU;AAC5C,QAAM,SAAS,eAAQ,YAAK,YAAM,CAAE,CAAb,CAAR,CAAf;AACA,QAAM,WAAW,IAAjB;;AAEA,WAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,EACE,uBADF;;AAGA,WAAO,GAAP;AACD,GARD;;AAUA,OAAK,IAAL,CAAU,4BAAV,EAAwC,kBAAU;AAChD,QAAM,SAAS,eAAQ,YAAK,YAAM,CAAE,CAAb,EAAe,YAAM,CAAE,CAAvB,EAAyB,YAAM,CAAE,CAAjC,CAAR,CAAf;AACA,QAAM,WAAW,IAAjB;;AAEA,WAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,EACE,uBADF;;AAGA,WAAO,GAAP;AACD,GARD;;AAUA,OAAK,IAAL,CAAU,oCAAV,EAAgD,kBAAU;AACxD,QAAM,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CACf,UAAC,CAAD;AAAA,aAAO,UAAC,CAAD,QAAqB;AAAA,YAAf,QAAe,QAAf,QAAe;AAAE,iBAAS,CAAT,IAAc,CAAd;AAAkB,OAAhD;AAAA,KADe,CAAjB;;AAGA,QAAM,SAAS,2CAAQ,QAAR,IAAf;AACA,QAAM,WAAW;AACf,SAAG,GADY;AAEf,SAAG,GAFY;AAGf,SAAG;AAHY,KAAjB;;AAMA,WAAO,SAAP,CAAiB,MAAjB,EAAyB,QAAzB,EACE,2CADF;;AAGA,WAAO,GAAP;AACD,GAfD;AAgBD,CArCD","file":"init.js","sourcesContent":["import test from 'tape';\nimport {init, isStamp} from '../';\n\ntest('init()', nest => {\n  nest.test('...with function input', assert => {\n    const actual = isStamp(init(() => {}));\n    const expected = true;\n\n    assert.equal(actual, expected,\n      'should return a stamp');\n\n    assert.end();\n  });\n\n  nest.test('...with multiple functions', assert => {\n    const actual = isStamp(init(() => {}, () => {}, () => {}));\n    const expected = true;\n\n    assert.equal(actual, expected,\n      'should return a stamp');\n\n    assert.end();\n  });\n\n  nest.test('...with multiple mutator functions', assert => {\n    const mutators = ['a', 'b', 'c'].map(\n      (i) => (o, { instance }) => { instance[i] = i; });\n\n    const actual = init(...mutators)();\n    const expected = {\n      a: 'a',\n      b: 'b',\n      c: 'c'\n    };\n\n    assert.deepEqual(actual, expected,\n      'should apply all initializers to instance');\n\n    assert.end();\n  });\n});\n"]}