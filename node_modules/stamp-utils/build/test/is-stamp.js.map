{"version":3,"sources":["../../src/test/is-stamp.js"],"names":[],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,oBAAK,WAAL,EAAkB,gBAAQ;AACxB,OAAK,IAAL,CAAU,qBAAV,EAAiC,kBAAU;AACzC,QAAM,SAAS,gBAAQ,wBAAR,CAAf;AACA,QAAM,WAAW,IAAjB;;AAEA,WAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,EACE,oBADF;;AAGA,WAAO,GAAP;AACD,GARD;;AAUA,OAAK,IAAL,CAAU,yBAAV,EAAqC,kBAAU;AAC7C,QAAM,SAAS,gBAAQ,YAAM,CAAE,CAAhB,CAAf;AACA,QAAM,WAAW,KAAjB;;AAEA,WAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,EACE,qBADF;;AAGA,WAAO,GAAP;AACD,GARD;;AAUA,OAAK,IAAL,CAAU,0BAAV,EAAsC,kBAAU;AAC9C,QAAM,SAAS,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,EAAY,EAAZ,EAAgB,YAAM,CAAE,CAAxB,EAA0B,GAA1B,YAAf;AACA,QAAM,WAAW,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,CAAjB;;AAEA,WAAO,SAAP,CAAiB,MAAjB,EAAyB,QAAzB,EACE,qBADF;;AAGA,WAAO,GAAP;AACD,GARD;;AAUA,OAAK,IAAL,CAAU,0CAAV,EAAsD,kBAAU;AAC9D,QAAM,aAAa,iBAAE,MAAF,CAAS,YAAM,CAAE,CAAjB,EAAmB;AACpC,eAAS,iBAAE,MAAF,CAAS,YAAM,CAAE,CAAjB,EAAmB;AAC1B,oBAAY;AACV,eAAK;AADK;AADc,OAAnB;AAD2B,KAAnB,CAAnB;;AAQA,QAAM,SAAS,gBAAQ,UAAR,CAAf;AACA,QAAM,WAAW,IAAjB;;AAEA,WAAO,SAAP,CAAiB,MAAjB,EAAyB,QAAzB,EACE,0CADF;AAEA,WAAO,GAAP;AACD,GAfD;AAgBD,CA/CD","file":"is-stamp.js","sourcesContent":["import test from 'tape';\nimport _ from 'lodash';\nimport compose from 'compose';\nimport {isStamp} from '../';\n\ntest('isStamp()', nest => {\n  nest.test('...with stamp input', assert => {\n    const actual = isStamp(compose());\n    const expected = true;\n\n    assert.equal(actual, expected,\n      'should return true');\n\n    assert.end();\n  });\n\n  nest.test('...with simple function', assert => {\n    const actual = isStamp(() => {});\n    const expected = false;\n\n    assert.equal(actual, expected,\n      'should return false');\n\n    assert.end();\n  });\n\n  nest.test('...with non-stamp inputs', assert => {\n    const actual = [0, '', {}, [], () => {}].map(isStamp);\n    const expected = [false, false, false, false, false];\n\n    assert.deepEqual(actual, expected,\n      'should return false');\n\n    assert.end();\n  });\n\n  nest.test('recognize composables with omitted props', assert => {\n    const composable = _.assign(() => {}, {\n      compose: _.assign(() => {}, {\n        properties: {\n          foo: 'bar'\n        }\n      })\n    });\n\n    const actual = isStamp(composable);\n    const expected = true;\n\n    assert.deepEqual(actual, expected,\n      'Recognize composables with omitted props');\n    assert.end();\n  });\n});\n"]}