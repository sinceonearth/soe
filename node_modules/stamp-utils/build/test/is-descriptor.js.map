{"version":3,"sources":["../../src/test/is-descriptor.js"],"names":[],"mappings":";;AAAA;;;;AAEA;;;;AAEA,oBAAK,cAAL,EAAqB,gBAAQ;AAC3B,OAAK,IAAL,CAAU,iBAAV,EAA6B,kBAAU;AACrC,QAAM,WAAW,KAAjB;AACA,KAAC,CAAD,EAAI,GAAJ,EAAS,IAAT,EAAe,SAAf,EAA0B,GAA1B,EAA+B,OAA/B,CAAuC,iBAAS;AAC9C,UAAM,SAAS,oBAAa,KAAb,CAAf;AACA,aAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,+BAA0D,KAA1D;AACD,KAHD;;AAKA,WAAO,GAAP;AACD,GARD;;AAUA,OAAK,IAAL,CAAU,+BAAV,EAA2C,kBAAU;AACnD,QAAM,MAAM,oCAAZ;AACA,QAAM,aAAa;AACjB,kBAAY;AACV,aAAK;AADK;AADK,KAAnB;AAKA,QAAM,SAAS,oBAAa,UAAb,CAAf;AACA,QAAM,WAAW,IAAjB;;AAEA,WAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,EAA+B,GAA/B;AACA,WAAO,GAAP;AACD,GAZD;;AAcA,OAAK,IAAL,CAAU,iCAAV,EAA6C,kBAAU;AACrD,QAAM,MAAM,oCAAZ;AACA,QAAM,aAAa;AACjB,oBAAc,CACZ,gBAAkB;AAAA,YAAf,QAAe,QAAf,QAAe;;AAChB,iBAAS,GAAT,GAAe,KAAf;AACD,OAHW;AADG,KAAnB;AAOA,QAAM,SAAS,oBAAa,UAAb,CAAf;AACA,QAAM,WAAW,IAAjB;;AAEA,WAAO,KAAP,CAAa,MAAb,EAAqB,QAArB,EAA+B,GAA/B;AACA,WAAO,GAAP;AACD,GAdD;AAeD,CAxCD","file":"is-descriptor.js","sourcesContent":["import test from 'tape';\n\nimport {isDescriptor} from '../';\n\ntest('isDescriptor', nest => {\n  nest.test('...with rubbish', assert => {\n    const expected = false;\n    [0, 'a', null, undefined, NaN].forEach(value => {\n      const actual = isDescriptor(value);\n      assert.equal(actual, expected, `should return false for ${value}`);\n    });\n\n    assert.end();\n  });\n\n  nest.test('...with descriptor.properties', assert => {\n    const msg = 'should return true for descriptors';\n    const descriptor = {\n      properties: {\n        foo: 'bar'\n      }\n    };\n    const actual = isDescriptor(descriptor);\n    const expected = true;\n\n    assert.equal(actual, expected, msg);\n    assert.end();\n  });\n\n  nest.test('...with descriptor.initializers', assert => {\n    const msg = 'should return true for descriptors';\n    const descriptor = {\n      initializers: [\n        ({ instance }) => {\n          instance.foo = 'bar';\n        }\n      ]\n    };\n    const actual = isDescriptor(descriptor);\n    const expected = true;\n\n    assert.equal(actual, expected, msg);\n    assert.end();\n  });\n});\n"]}