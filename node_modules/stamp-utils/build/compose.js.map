{"version":3,"sources":["../src/compose.js"],"names":[],"mappings":"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","file":"compose.js","sourcesContent":["/*\nThis is an example implementation of the Stamp Specifications.\nSee https://github.com/stampit-org/stamp-specification\nThe code is optimized to be as readable as possible.\n */\n\nimport mergeWith from 'lodash/mergeWith';\nimport assign from 'lodash/assign';\nimport isFunction from 'lodash/isFunction';\nimport isObject from 'lodash/isObject';\n\nconst isDescriptor = isObject;\nexport const merge = (dst, src) => mergeWith(dst, src, (dstValue, srcValue) => {\n  if (Array.isArray(dstValue)) {\n    if (Array.isArray(srcValue)) return dstValue.concat(srcValue);\n    if (isObject(srcValue)) return merge({}, srcValue);\n  }\n});\n\n/**\n * Creates new factory instance.\n * @param {object} descriptor The information about the object the factory will be creating.\n * @returns {Function} The new factory function.\n */\nfunction createFactory(descriptor) {\n  return function Stamp(options, ...args) {\n    let obj = Object.create(descriptor.methods || {});\n\n    merge(obj, descriptor.deepProperties);\n    assign(obj, descriptor.properties);\n    Object.defineProperties(obj, descriptor.propertyDescriptors || {});\n\n    if (!descriptor.initializers || descriptor.initializers.length === 0) return obj;\n\n    return descriptor.initializers.filter(isFunction).reduce((resultingObj, initializer) => {\n      const returnedValue = initializer.call(resultingObj, options,\n        {instance: resultingObj, stamp: Stamp, args: [options].concat(args)});\n      return returnedValue === undefined ? resultingObj : returnedValue;\n    }, obj);\n  };\n}\n\n/**\n * Returns a new stamp given a descriptor and a compose function implementation.\n * @param {object} [descriptor={}] The information about the object the stamp will be creating.\n * @param {Function} composeFunction The \"compose\" function implementation.\n * @returns {Function}\n */\nfunction createStamp(descriptor, composeFunction) {\n  const Stamp = createFactory(descriptor);\n\n  merge(Stamp, descriptor.staticDeepProperties);\n  assign(Stamp, descriptor.staticProperties);\n  Object.defineProperties(Stamp, descriptor.staticPropertyDescriptors || {});\n\n  const composeImplementation = isFunction(Stamp.compose) ? Stamp.compose : composeFunction;\n  Stamp.compose = function () {\n    return composeImplementation.apply(this, arguments);\n  };\n  assign(Stamp.compose, descriptor);\n\n  return Stamp;\n}\n\n/**\n * Mutates the dstDescriptor by merging the srcComposable data into it.\n * @param {object} dstDescriptor The descriptor object to merge into.\n * @param {object} [srcComposable] The composable (either descriptor or stamp) to merge data form.\n * @returns {object} Returns the dstDescriptor argument.\n */\nfunction mergeComposable(dstDescriptor, srcComposable) {\n  const srcDescriptor = (srcComposable && srcComposable.compose) || srcComposable;\n  if (!isDescriptor(srcDescriptor)) return dstDescriptor;\n\n  const combineProperty = (propName, action) => {\n    if (!isObject(srcDescriptor[propName])) return;\n    if (!isObject(dstDescriptor[propName])) dstDescriptor[propName] = {};\n    action(dstDescriptor[propName], srcDescriptor[propName]);\n  };\n\n  combineProperty('methods', assign);\n  combineProperty('properties', assign);\n  combineProperty('deepProperties', merge);\n  combineProperty('propertyDescriptors', assign);\n  combineProperty('staticProperties', assign);\n  combineProperty('staticDeepProperties', merge);\n  combineProperty('staticPropertyDescriptors', assign);\n  combineProperty('configuration', assign);\n  combineProperty('deepConfiguration', merge);\n  if (Array.isArray(srcDescriptor.initializers)) {\n    dstDescriptor.initializers = srcDescriptor.initializers.reduce((result, init) => {\n      if (isFunction(init) && result.indexOf(init) < 0) {\n        result.push(init);\n      }\n      return result;\n    }, Array.isArray(dstDescriptor.initializers) ? dstDescriptor.initializers : []);\n  }\n\n  return dstDescriptor;\n}\n\n/**\n * Given the list of composables (stamp descriptors and stamps) returns a new stamp (composable factory function).\n * @param {...(object|Function)} [composables] The list of composables.\n * @returns {Function} A new stamp (aka composable factory function).\n */\nexport default function compose(...composables) {\n  const descriptor = [this].concat(composables).filter(isObject).reduce(mergeComposable, {});\n  return createStamp(descriptor, compose);\n}\n"]}