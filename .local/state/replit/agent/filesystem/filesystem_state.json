{"file_contents":{"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/db.ts":{"content":"import 'dotenv/config';\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { neon } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\n\n// Load environment variables explicitly (optional, since dotenv/config does this)\nimport { config } from 'dotenv';\nconfig();\n\n// Retrieve the database URL from environment variables\nconst databaseUrl = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL;\n\nif (!databaseUrl) {\n  throw new Error(\n    \"Database URL not set. Please set NEON_DATABASE_URL or DATABASE_URL environment variable.\"\n  );\n}\n\n// Validate URL format (must start with postgresql:// or postgres://)\nif (\n  !databaseUrl.startsWith(\"postgresql://\") &&\n  !databaseUrl.startsWith(\"postgres://\")\n) {\n  throw new Error(\n    `Invalid database URL format: ${databaseUrl.substring(0, 50)}...`\n  );\n}\n\n// Clean URL by removing 'channel_binding=require' query param if present\nconst cleanedUrl = databaseUrl.replace(/([&?])channel_binding=require/, '');\n\n// Initialize Neon client and Drizzle ORM with schema\nconst sql = neon(cleanedUrl);\nexport const db = drizzle(sql, { schema });\n","size_bytes":1113},"public/service-worker.js":{"content":"const CACHE_NAME = 'sinceonearth-v2';\nconst STATIC_CACHE = 'sinceonearth-static-v2';\nconst DYNAMIC_CACHE = 'sinceonearth-dynamic-v2';\n\nconst STATIC_FILES = [\n  '/',\n  '/index.html',\n  '/manifest.json',\n  '/face-alien.png' // ✅ single app icon\n];\n\nself.addEventListener('install', (event) => {\n  console.log('[SW] Installing new service worker...');\n  event.waitUntil(\n    caches.open(STATIC_CACHE)\n      .then((cache) => {\n        console.log('[SW] Caching static assets...');\n        return cache.addAll(STATIC_FILES);\n      })\n      .catch((err) => {\n        console.error('[SW] Error caching static files:', err);\n      })\n  );\n  self.skipWaiting();\n});\n\nself.addEventListener('activate', (event) => {\n  console.log('[SW] Activating service worker and cleaning old caches...');\n  event.waitUntil(\n    caches.keys().then((cacheNames) =>\n      Promise.all(\n        cacheNames\n          .filter((cacheName) => ![STATIC_CACHE, DYNAMIC_CACHE].includes(cacheName))\n          .map((cacheName) => {\n            console.log('[SW] Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          })\n      )\n    )\n  );\n  self.clients.claim();\n});\n\nself.addEventListener('fetch', (event) => {\n  const { request } = event;\n  const url = new URL(request.url);\n\n  if (request.method !== 'GET') return;\n\n  // ✅ API requests handled separately\n  if (url.pathname.startsWith('/api/')) {\n    event.respondWith(\n      fetch(request)\n        .then((response) => {\n          if (response.status === 200) {\n            const clone = response.clone();\n            caches.open(DYNAMIC_CACHE).then((cache) => cache.put(request, clone));\n          }\n          return response;\n        })\n        .catch(() => caches.match(request))\n    );\n    return;\n  }\n\n  // ✅ Static assets & pages\n  event.respondWith(\n    caches.match(request)\n      .then((cached) => {\n        if (cached) return cached;\n\n        return fetch(request)\n          .then((response) => {\n            if (!response || response.status !== 200 || response.type === 'error') {\n              return response;\n            }\n\n            const clone = response.clone();\n            caches.open(DYNAMIC_CACHE).then((cache) => cache.put(request, clone));\n            return response;\n          })\n          .catch(() => {\n            if (request.destination === 'document') {\n              return caches.match('/index.html');\n            }\n          });\n      })\n  );\n});\n\nself.addEventListener('message', (event) => {\n  if (event.data?.type === 'SKIP_WAITING') {\n    console.log('[SW] Skipping waiting...');\n    self.skipWaiting();\n  }\n});\n","size_bytes":2606},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"tailwind.config.ts":{"content":"import type { Config } from 'tailwindcss';\nimport typography from '@tailwindcss/typography';\nimport animate from 'tailwindcss-animate';\n\nconst config: Config = {\n  darkMode: ['class'],\n  content: [\n    './client/index.html',\n    './client/src/**/*.{js,jsx,ts,tsx}',\n  ],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: '0.5625rem',\n        md: '0.375rem',\n        sm: '0.1875rem',\n      },\n      colors: {\n        background: 'hsl(var(--background) / <alpha-value>)',\n        foreground: 'hsl(var(--foreground) / <alpha-value>)',\n        border: 'hsl(var(--border) / <alpha-value>)',\n        input: 'hsl(var(--input) / <alpha-value>)',\n        card: {\n          DEFAULT: 'hsl(var(--card) / <alpha-value>)',\n          foreground: 'hsl(var(--card-foreground) / <alpha-value>)',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover) / <alpha-value>)',\n          foreground: 'hsl(var(--popover-foreground) / <alpha-value>)',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary) / <alpha-value>)',\n          foreground: 'hsl(var(--primary-foreground) / <alpha-value>)',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary) / <alpha-value>)',\n          foreground: 'hsl(var(--secondary-foreground) / <alpha-value>)',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted) / <alpha-value>)',\n          foreground: 'hsl(var(--muted-foreground) / <alpha-value>)',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent) / <alpha-value>)',\n          foreground: 'hsl(var(--accent-foreground) / <alpha-value>)',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive) / <alpha-value>)',\n          foreground: 'hsl(var(--destructive-foreground) / <alpha-value>)',\n        },\n        ring: 'hsl(var(--ring) / <alpha-value>)',\n        chart: {\n          1: 'hsl(var(--chart-1) / <alpha-value>)',\n          2: 'hsl(var(--chart-2) / <alpha-value>)',\n          3: 'hsl(var(--chart-3) / <alpha-value>)',\n          4: 'hsl(var(--chart-4) / <alpha-value>)',\n          5: 'hsl(var(--chart-5) / <alpha-value>)',\n        },\n        sidebar: {\n          DEFAULT: 'hsl(var(--sidebar) / <alpha-value>)',\n          foreground: 'hsl(var(--sidebar-foreground) / <alpha-value>)',\n          ring: 'hsl(var(--sidebar-ring) / <alpha-value>)',\n        },\n        'sidebar-primary': {\n          DEFAULT: 'hsl(var(--sidebar-primary) / <alpha-value>)',\n          foreground: 'hsl(var(--sidebar-primary-foreground) / <alpha-value>)',\n        },\n        'sidebar-accent': {\n          DEFAULT: 'hsl(var(--sidebar-accent) / <alpha-value>)',\n          foreground: 'hsl(var(--sidebar-accent-foreground) / <alpha-value>)',\n        },\n        status: {\n          online: 'rgb(34 197 94)',\n          away: 'rgb(245 158 11)',\n          busy: 'rgb(239 68 68)',\n          offline: 'rgb(156 163 175)',\n        },\n      },\n      fontFamily: {\n        sans: [\n          '-apple-system',\n          'BlinkMacSystemFont',\n          '\"Segoe UI\"',\n          'Roboto',\n          'Oxygen',\n          'Ubuntu',\n          'Cantarell',\n          '\"Open Sans\"',\n          '\"Helvetica Neue\"',\n        ],\n      },\n      keyframes: {\n        'accordion-down': {\n          from: { height: '0' },\n          to: { height: 'var(--radix-accordion-content-height)' },\n        },\n        'accordion-up': {\n          from: { height: 'var(--radix-accordion-content-height)' },\n          to: { height: '0' },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [typography, animate],\n};\n\nexport default config;\n","size_bytes":3670},"client/src/pages/TripHistory.tsx":{"content":"\"use client\";\n\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport type { Flight } from \"@shared/schema\";\nimport { Ruler, Clock, Plus, ArrowLeft } from \"lucide-react\";\nimport ManualAddFlight from \"@/components/ManualAddFlight\";\n\ninterface TripHistoryProps {\n  flights: Flight[];\n  userId: string;\n  onRefresh?: () => void;\n}\n\nconst PAGE_SIZE = 12;\n\n// Calculate actual flight distance in km (with multiplier for air corridors)\nconst getDistance = (\n  lat1?: number | null,\n  lon1?: number | null,\n  lat2?: number | null,\n  lon2?: number | null,\n  storedDistance?: number | null\n): number | null => {\n  // Use stored distance if available\n  if (storedDistance != null && storedDistance > 0) {\n    return storedDistance;\n  }\n  \n  if (lat1 == null || lon1 == null || lat2 == null || lon2 == null) return null;\n\n  // Haversine formula for great circle distance\n  const toRad = (x: number) => (x * Math.PI) / 180;\n  const R = 6371; // Earth's radius in km\n  const dLat = toRad(lat2 - lat1);\n  const dLon = toRad(lon2 - lon1);\n\n  const a =\n    Math.sin(dLat / 2) ** 2 +\n    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.sin(dLon / 2) ** 2;\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const greatCircleDist = R * c;\n  \n  // Apply 1.15x multiplier for actual flight path (air corridors, weather routing, etc.)\n  return greatCircleDist * 1.15;\n};\n\n// Format duration in \"Xh Ym\"\nconst formatDuration = (hours: number) => {\n  const h = Math.floor(hours);\n  const m = Math.round((hours - h) * 60);\n  return `${h}h ${m}m`;\n};\n\nexport default function TripHistory({ flights, userId, onRefresh }: TripHistoryProps) {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [selectedPastTab, setSelectedPastTab] = useState<string>(\"All\");\n  const [visiblePastCount, setVisiblePastCount] = useState(PAGE_SIZE);\n  const [visibleUpcomingCount, setVisibleUpcomingCount] = useState(PAGE_SIZE);\n\n  const handleFlightAdded = () => {\n    setShowAddForm(false);\n    if (onRefresh) onRefresh();\n  };\n\n  const [upcomingFlightsState, setUpcomingFlightsState] = useState<Flight[]>([]);\n  const [pastFlightsState, setPastFlightsState] = useState<Flight[]>([]);\n\n  const now = new Date();\n\n  const safeParseDate = (dateStr?: string | null): Date | null => {\n    if (!dateStr) return null;\n    const d = new Date(dateStr);\n    return isNaN(d.getTime()) ? null : d;\n  };\n\n  // Initialize upcoming & past flights\n  useEffect(() => {\n    const upcoming: Flight[] = [];\n    const past: Flight[] = [];\n\n    flights.forEach((f) => {\n      const d = safeParseDate(f.date ?? f.departure_time);\n      if (!d) return;\n      if (d > now) upcoming.push(f);\n      else past.push(f);\n    });\n\n    setUpcomingFlightsState(upcoming);\n    setPastFlightsState(past);\n  }, [flights]);\n\n  // Auto move flights from upcoming → past after date has passed\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date();\n      const newlyPast: Flight[] = [];\n      const stillUpcoming: Flight[] = [];\n\n      upcomingFlightsState.forEach((f) => {\n        const d = safeParseDate(f.date ?? f.departure_time);\n        if (d && d <= now) {\n          newlyPast.push({ ...f, status: \"Landed\" });\n        } else stillUpcoming.push(f);\n      });\n\n      if (newlyPast.length > 0) {\n        setPastFlightsState((prev) => [...prev, ...newlyPast]);\n        setUpcomingFlightsState(stillUpcoming);\n      }\n    }, 60 * 1000);\n\n    return () => clearInterval(interval);\n  }, [upcomingFlightsState]);\n\n  // Past years tabs\n  const years = useMemo(() => {\n    const setYears = new Set<number>();\n    pastFlightsState.forEach((f) => {\n      const d = safeParseDate(f.date ?? f.departure_time);\n      if (d) setYears.add(d.getFullYear());\n    });\n    return [...setYears].sort((a, b) => b - a);\n  }, [pastFlightsState]);\n\n  const pastTabs = [\"All\", ...years.map(String)];\n\n  const pastToShow = useMemo(() => {\n    if (selectedPastTab === \"All\") return pastFlightsState;\n    const year = Number(selectedPastTab);\n    return pastFlightsState.filter((f) => {\n      const d = safeParseDate(f.date ?? f.departure_time);\n      return d !== null && d.getFullYear() === year;\n    });\n  }, [pastFlightsState, selectedPastTab]);\n\n  const handleLoadMorePast = () => setVisiblePastCount((c) => c + PAGE_SIZE);\n  const handleLoadMoreUpcoming = () => setVisibleUpcomingCount((c) => c + PAGE_SIZE);\n\n  const FlightCard = ({\n    f,\n    showStatus,\n    isUpcoming,\n  }: {\n    f: Flight;\n    showStatus?: boolean;\n    isUpcoming?: boolean;\n  }) => {\n    const d = safeParseDate(f.date ?? f.departure_time);\n    const dateStr = d ? d.toLocaleDateString() : \"N/A\";\n\n    const statusColor = isUpcoming\n      ? \"bg-green-500 text-black\"\n      : \"bg-red-600 text-white\";\n\n    const distanceKm = getDistance(\n      f.departure_latitude,\n      f.departure_longitude,\n      f.arrival_latitude,\n      f.arrival_longitude,\n      f.distance\n    );\n\n    // Calculate duration from stored value or estimate\n    let durationHours: number | null = null;\n    if (f.duration) {\n      const durationStr = String(f.duration);\n      if (durationStr.includes('h') || durationStr.includes('m')) {\n        const hours = durationStr.match(/(\\d+)h/);\n        const mins = durationStr.match(/(\\d+)m/);\n        durationHours = (hours ? parseInt(hours[1]) : 0) + (mins ? parseInt(mins[1]) / 60 : 0);\n      } else {\n        durationHours = parseFloat(durationStr) / 60;\n      }\n    } else if (distanceKm != null) {\n      // Estimate: actual flight time = distance / 850 km/h + 30min for taxi/climb/descent\n      durationHours = (distanceKm / 850) + 0.5;\n    }\n\n    return (\n      <div className=\"p-4 bg-neutral-900 border border-gray-700 rounded-xl hover:shadow-lg transition-shadow flex justify-between\">\n        {/* Left side */}\n        <div className=\"flex flex-col gap-1\">\n          {/* Airline + flight number */}\n          <div className=\"font-semibold text-lg text-white\">\n            {f.airline_name || \"Unknown Airline\"} {f.flight_number || \"N/A\"}\n          </div>\n\n          {/* Departure → Arrival */}\n          <div className=\"text-sm text-gray-300\">\n            {f.departure || \"???\"} → {f.arrival || \"???\"}\n          </div>\n\n          {/* Distance & Duration */}\n          <div className=\"flex gap-2 mt-1 text-xs text-gray-400\">\n            {distanceKm && (\n              <span className=\"flex items-center gap-1\">\n                <Ruler size={12} /> {distanceKm.toFixed(1)} kms\n              </span>\n            )}\n            {durationHours && (\n              <span className=\"flex items-center gap-1\">\n                <Clock size={12} /> {formatDuration(durationHours)}\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* Right side */}\n        <div className=\"flex flex-col items-end text-sm gap-1\">\n          <span className=\"text-gray-300\">{dateStr}</span>\n          {showStatus && f.status && (\n            <span\n              className={`px-2 py-0.5 rounded-full text-xs flex items-center gap-1 ${statusColor}`}\n            >\n              {isUpcoming && <span className=\"w-2 h-2 rounded-full animate-pulse bg-white\" />}\n              {f.status}\n            </span>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Show full-page Add Flight form\n  if (showAddForm) {\n    return (\n      <div className=\"min-h-screen w-full bg-black text-white flex flex-col relative px-4 md:px-8 py-6\">\n        <button\n          onClick={() => setShowAddForm(false)}\n          className=\"flex items-center gap-2 text-white hover:text-green-400 transition-colors mb-6\"\n        >\n          <ArrowLeft size={20} />\n          <span className=\"font-semibold\">Back to Trips</span>\n        </button>\n        <ManualAddFlight userId={userId} onSuccess={handleFlightAdded} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen w-full bg-black text-white flex flex-col relative px-4 md:px-8\">\n      {/* Add Flight Button */}\n      <div className=\"mb-6\">\n        <button\n          onClick={() => setShowAddForm(true)}\n          className=\"px-6 py-2 bg-green-500 hover:bg-green-600 text-black font-semibold rounded-full transition-all flex items-center gap-2\"\n        >\n          <Plus size={20} />\n          Add Flight\n        </button>\n      </div>\n\n      {/* Upcoming Flights */}\n      <div className=\"mb-6\">\n        <div className=\"text-green-400 text-xl font-semibold mb-3\">\n          Upcoming Flights\n        </div>\n        {upcomingFlightsState.length === 0 ? (\n          <div className=\"text-gray-400 text-center\">No upcoming flights</div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {upcomingFlightsState.slice(0, visibleUpcomingCount).map((f) => (\n                <FlightCard key={f.id} f={f} showStatus={true} isUpcoming />\n              ))}\n            </div>\n            {visibleUpcomingCount < upcomingFlightsState.length && (\n              <div className=\"flex justify-center mt-4\">\n                <button\n                  onClick={handleLoadMoreUpcoming}\n                  className=\"px-6 py-2 rounded-full bg-green-500 hover:bg-green-600 text-black font-semibold\"\n                >\n                  Load More\n                </button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n\n      <div className=\"border-b border-gray-600/40 my-6\" />\n\n      {/* Past Flights */}\n      <div>\n        <div className=\"text-red-400 text-xl font-semibold mb-3\">Past Flights</div>\n\n        {/* Tabs */}\n        {pastTabs.length > 0 && (\n          <div className=\"w-full overflow-x-auto scrollbar-hide relative bg-black my-0\">\n            <div className=\"flex gap-1 py-2 min-w-[max-content] pl-1 pr-4\">\n              {pastTabs.map((tab) => (\n                <button\n                  key={tab}\n                  onClick={() => {\n                    setSelectedPastTab(tab);\n                    setVisiblePastCount(PAGE_SIZE);\n                  }}\n                  className={`px-5 py-2 transition-all whitespace-nowrap focus:outline-none ${\n                    tab === selectedPastTab\n                      ? \"bg-red-500 text-black font-semibold rounded-full\"\n                      : \"text-red-400 hover:text-red-300 bg-transparent\"\n                  }`}\n                >\n                  {tab}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"border-b border-gray-600/40 my-3\" />\n\n        {/* Total past flights */}\n        <div className=\"text-red-400 font-medium mb-4\">\n          ✈️ Total flights: {pastToShow.length}\n        </div>\n\n        {pastToShow.length === 0 ? (\n          <div className=\"text-center text-gray-400 mt-4\">\n            No flights for {selectedPastTab}\n          </div>\n        ) : (\n          <>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {pastToShow.slice(0, visiblePastCount).map((f) => (\n                <FlightCard key={f.id} f={f} showStatus={true} />\n              ))}\n            </div>\n            {visiblePastCount < pastToShow.length && (\n              <div className=\"flex justify-center mt-4\">\n                <button\n                  onClick={handleLoadMorePast}\n                  className=\"px-6 py-2 rounded-full bg-red-500 hover:bg-red-600 text-black font-semibold\"\n                >\n                  Load More\n                </button>\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":11524},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/Admin.tsx":{"content":"\"use client\";\n\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Edit3, Trash2 } from \"lucide-react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n} from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useState } from \"react\";\nimport { Header } from \"@/components/Header\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  alien: string | null;\n  name: string;\n  is_admin: boolean;\n  created_at: string;\n}\n\nexport default function Admin() {\n  const { toast } = useToast();\n  const [isMobile, setIsMobile] = useState(false);\n\n  // ✅ Fetch users\n  const { data: users, isLoading, isError } = useQuery<User[]>({\n    queryKey: [\"/api/admin/users\"],\n    queryFn: async () => {\n      const res = await apiRequest(\"GET\", \"/api/admin/users\");\n      if (!res.ok) throw new Error(\"Failed to fetch users\");\n      return res.json();\n    },\n  });\n\n  // ✅ Responsive check\n  useState(() => setIsMobile(window.innerWidth < 768));\n\n  // ✅ Delete user\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/admin/users/${id}`);\n      if (!res.ok) throw new Error(\"Failed to delete\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User deleted\", description: \"User removed successfully.\" });\n    },\n    onError: () =>\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete user.\",\n        variant: \"destructive\",\n      }),\n  });\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this user?\")) {\n      deleteUserMutation.mutate(id);\n    }\n  };\n\n  // ✅ Update user (toggle admin)\n  const updateUserMutation = useMutation({\n    mutationFn: async (updatedUser: Partial<User>) => {\n      if (!updatedUser.id) throw new Error(\"User ID missing\");\n      const res = await apiRequest(\n        \"PATCH\",\n        `/api/admin/users/${updatedUser.id}`,\n        updatedUser\n      );\n      if (!res.ok) throw new Error(\"Failed to update user\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({ title: \"User updated\", description: \"Changes saved successfully.\" });\n    },\n    onError: () =>\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user.\",\n        variant: \"destructive\",\n      }),\n  });\n\n  const handleEdit = (user: User) => {\n    const newStatus = !user.is_admin;\n    updateUserMutation.mutate({ id: user.id, is_admin: newStatus });\n  };\n\n  if (isLoading) return <p className=\"text-gray-400\">Loading users...</p>;\n  if (isError) return <p className=\"text-red-400\">Failed to load users.</p>;\n\n  return (\n    <div className=\"min-h-screen w-screen bg-black text-white flex flex-col\">\n      <Header />\n      <div className=\"flex-1 overflow-y-auto px-6 pt-20 pb-6 md:px-8\">\n        <div className=\"w-full flex flex-col gap-4\">\n      {isMobile ? (\n        <div className=\"space-y-4\">\n          {users?.map((user) => (\n            <Card\n              key={user.id}\n              className=\"bg-neutral-900 border border-zinc-700/40 shadow-lg rounded-2xl p-5 w-full\"\n            >\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <h2 className=\"text-lg font-semibold text-white flex items-center gap-2\">\n                    {user.name}\n                    {user.alien && (\n                      <span className=\"text-gray-400 text-sm\">({user.alien})</span>\n                    )}\n                  </h2>\n                  <p className=\"text-sm text-gray-400\">@{user.username}</p>\n                  <p className=\"text-sm text-gray-400\">{user.email}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Joined: {new Date(user.created_at).toLocaleDateString()}\n                  </p>\n                </div>\n                <div className=\"flex flex-col items-end gap-2\">\n                  <Badge\n                    className={`rounded-full px-3 py-1 text-xs font-semibold ${\n                      user.is_admin\n                        ? \"bg-green-600/20 text-green-300 border border-green-600/40\"\n                        : \"bg-zinc-800/60 text-gray-300 border border-zinc-700/40\"\n                    }`}\n                  >\n                    {user.is_admin ? \"Admin\" : \"User\"}\n                  </Badge>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      onClick={() => handleEdit(user)}\n                      size=\"sm\"\n                      className=\"rounded-full bg-green-700/30 border border-green-600/40 hover:bg-green-600/40 text-green-300 text-xs px-2 py-1 flex items-center gap-1\"\n                    >\n                      <Edit3 className=\"h-3 w-3\" /> Edit\n                    </Button>\n                    <Button\n                      onClick={() => handleDelete(user.id)}\n                      size=\"sm\"\n                      className=\"rounded-full bg-red-800/20 border border-red-600/30 hover:bg-red-700/40 text-red-300 text-xs px-2 py-1 flex items-center gap-1\"\n                    >\n                      <Trash2 className=\"h-3 w-3\" /> Delete\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"bg-neutral-900 border border-zinc-700/40 shadow-xl rounded-2xl w-full overflow-hidden\">\n          <CardHeader className=\"border-b border-zinc-700/40 pb-4\">\n            <CardTitle className=\"text-green-400 text-xl font-bold\">User Registry</CardTitle>\n            <CardDescription className=\"text-gray-400\">\n              All registered users and their credentials\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <table className=\"w-full text-sm\">\n              <thead className=\"bg-green-950/30 border-b border-zinc-700/40\">\n                <tr>\n                  <th className=\"py-3 px-4 text-left text-xs text-gray-400 uppercase\">Name</th>\n                  <th className=\"py-3 px-4 text-left text-xs text-gray-400 uppercase\">Username</th>\n                  <th className=\"py-3 px-4 text-left text-xs text-gray-400 uppercase\">Email</th>\n                  <th className=\"py-3 px-4 text-right text-xs text-gray-400 uppercase\">\n                    Role / Actions\n                  </th>\n                  <th className=\"py-3 px-4 text-right text-xs text-gray-400 uppercase\">Joined</th>\n                </tr>\n              </thead>\n              <tbody>\n                {users?.map((user) => (\n                  <tr\n                    key={user.id}\n                    className=\"border-b border-zinc-800/60 hover:bg-green-950/20 transition-all\"\n                  >\n                    <td className=\"py-3 px-4 text-white font-medium\">\n                      {user.name}{\" \"}\n                      {user.alien && (\n                        <span className=\"text-gray-400 text-sm\">({user.alien})</span>\n                      )}\n                    </td>\n                    <td className=\"py-3 px-4 text-green-400\">@{user.username}</td>\n                    <td className=\"py-3 px-4 text-gray-300\">{user.email}</td>\n                    <td className=\"py-3 px-4 text-right\">\n                      <div className=\"flex items-center justify-end gap-2\">\n                        <Badge\n                          className={`rounded-full px-3 py-1 text-xs font-semibold ${\n                            user.is_admin\n                              ? \"bg-green-600/20 text-green-400 border border-green-600/40\"\n                              : \"bg-zinc-800/60 text-gray-300 border border-zinc-700/40\"\n                          }`}\n                        >\n                          {user.is_admin ? \"Admin\" : \"User\"}\n                        </Badge>\n                        <Button\n                          onClick={() => handleEdit(user)}\n                          size=\"sm\"\n                          className=\"rounded-full bg-green-700/30 border border-green-600/40 hover:bg-green-600/40 text-green-300 text-xs px-2 py-1 flex items-center gap-1\"\n                        >\n                          <Edit3 className=\"h-3 w-3\" /> Edit\n                        </Button>\n                        <Button\n                          onClick={() => handleDelete(user.id)}\n                          size=\"sm\"\n                          className=\"rounded-full bg-red-800/20 border border-red-600/30 hover:bg-red-700/40 text-red-300 text-xs px-2 py-1 flex items-center gap-1\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" /> Delete\n                        </Button>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4 text-gray-400 text-right\">\n                      {new Date(user.created_at).toLocaleDateString()}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </CardContent>\n        </Card>\n      )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9362},"android/app/src/androidTest/java/com/getcapacitor/myapp/ExampleInstrumentedTest.java":{"content":"package com.getcapacitor.myapp;\n\nimport static org.junit.Assert.*;\n\nimport android.content.Context;\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\nimport androidx.test.platform.app.InstrumentationRegistry;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\n/**\n * Instrumented test, which will execute on an Android device.\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n\n    @Test\n    public void useAppContext() throws Exception {\n        // Context of the app under test.\n        Context appContext = InstrumentationRegistry.getInstrumentation().getTargetContext();\n\n        assertEquals(\"com.getcapacitor.app\", appContext.getPackageName());\n    }\n}\n","size_bytes":774},"client/src/components/ManualAddFlight.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect, useMemo } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Button } from \"@/components/ui/button\";\nimport airlinesData from \"@/airlines.json\";\nimport airportsData from \"@/airports.json\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { createLucideIcon, ScanText } from \"lucide-react\";\nimport { faceAlien } from \"@lucide/lab\";\nimport Tesseract from \"tesseract.js\";\n\nconst FaceAlienIcon = createLucideIcon(\"FaceAlienIcon\", faceAlien);\n\ninterface Airline {\n  name: string;\n  airline_code?: string;\n}\n\ninterface Airport {\n  name: string;\n  iata?: string;\n  ident?: string;\n  latitude?: number;\n  longitude?: number;\n}\n\ninterface ManualAddFlightProps {\n  userId: string;\n  onSuccess?: () => void;\n}\n\nexport default function ManualAddFlight({ userId, onSuccess }: ManualAddFlightProps) {\n  const [airline, setAirline] = useState(\"\");\n  const [airlineCode, setAirlineCode] = useState(\"\");\n  const [flightNumber, setFlightNumber] = useState(\"\");\n  const [departureInput, setDepartureInput] = useState(\"\");\n  const [arrivalInput, setArrivalInput] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [departureTime, setDepartureTime] = useState(\"\");\n  const [arrivalTime, setArrivalTime] = useState(\"\");\n  const [status, setStatus] = useState(\"scheduled\");\n\n  const [departureAirport, setDepartureAirport] = useState<Airport | null>(null);\n  const [arrivalAirport, setArrivalAirport] = useState<Airport | null>(null);\n\n  const [suggestedAirlines, setSuggestedAirlines] = useState<Airline[]>([]);\n  const [suggestedDepAirports, setSuggestedDepAirports] = useState<Airport[]>([]);\n  const [suggestedArrAirports, setSuggestedArrAirports] = useState<Airport[]>([]);\n\n  const [isAdding, setIsAdding] = useState(false);\n  const [isScanning, setIsScanning] = useState(false);\n  const [scanProgress, setScanProgress] = useState(0);\n\n  const airlines: Airline[] = (airlinesData as any[]).map((a) => ({\n    name: a.airline_name ?? \"\",\n    airline_code: a.airline_code ?? \"\",\n  }));\n\n  const airports: Airport[] = (airportsData as any[]).map((a) => ({\n    name: a.name ?? \"\",\n    iata: a.iata ?? \"\",\n    ident: a.ident ?? \"\",\n    latitude: a.latitude ?? 0,\n    longitude: a.longitude ?? 0,\n  }));\n\n  const debounce = <T extends (...args: any[]) => void>(func: T, delay: number) => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n    return (...args: Parameters<T>) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => func(...args), delay);\n    };\n  };\n\n  const handleAirlineInput = useMemo(\n    () =>\n      debounce((val: string) => {\n        if (!val) return setSuggestedAirlines([]);\n        setSuggestedAirlines(\n          airlines\n            .filter(\n              (a) =>\n                a.name.toLowerCase().includes(val.toLowerCase()) ||\n                a.airline_code?.toLowerCase().includes(val.toLowerCase())\n            )\n            .slice(0, 8)\n        );\n      }, 200),\n    []\n  );\n\n  const handleDepInput = useMemo(\n    () =>\n      debounce((val: string) => {\n        if (!val) return setSuggestedDepAirports([]);\n        setSuggestedDepAirports(\n          airports\n            .filter(\n              (a) =>\n                a.name.toLowerCase().includes(val.toLowerCase()) ||\n                a.iata?.toLowerCase().includes(val.toLowerCase()) ||\n                a.ident?.toLowerCase().includes(val.toLowerCase())\n            )\n            .slice(0, 8)\n        );\n      }, 200),\n    []\n  );\n\n  const handleArrInput = useMemo(\n    () =>\n      debounce((val: string) => {\n        if (!val) return setSuggestedArrAirports([]);\n        setSuggestedArrAirports(\n          airports\n            .filter(\n              (a) =>\n                a.name.toLowerCase().includes(val.toLowerCase()) ||\n                a.iata?.toLowerCase().includes(val.toLowerCase()) ||\n                a.ident?.toLowerCase().includes(val.toLowerCase())\n            )\n            .slice(0, 8)\n        );\n      }, 200),\n    []\n  );\n\n  useEffect(() => handleAirlineInput(airline), [airline, handleAirlineInput]);\n  useEffect(() => handleDepInput(departureInput), [departureInput, handleDepInput]);\n  useEffect(() => handleArrInput(arrivalInput), [arrivalInput, handleArrInput]);\n\n  const handleAirlineSelect = (a: Airline) => {\n    setAirline(`${a.name} (${a.airline_code})`);\n    setAirlineCode(a.airline_code || \"\");\n    setFlightNumber(a.airline_code ? `${a.airline_code}-` : \"\");\n    setSuggestedAirlines([]);\n  };\n\n  const handleDepSelect = (a: Airport) => {\n    setDepartureInput(`${a.name} (${a.iata || a.ident})`);\n    setDepartureAirport(a);\n    setSuggestedDepAirports([]);\n  };\n\n  const handleArrSelect = (a: Airport) => {\n    setArrivalInput(`${a.name} (${a.iata || a.ident})`);\n    setArrivalAirport(a);\n    setSuggestedArrAirports([]);\n  };\n\n  const handleReset = () => {\n    setAirline(\"\");\n    setAirlineCode(\"\");\n    setFlightNumber(\"\");\n    setDepartureInput(\"\");\n    setArrivalInput(\"\");\n    setDate(\"\");\n    setDepartureTime(\"\");\n    setArrivalTime(\"\");\n    setDepartureAirport(null);\n    setArrivalAirport(null);\n    setStatus(\"scheduled\");\n  };\n\n  const handleAddFlight = async () => {\n    if (!date || !departureAirport || !arrivalAirport) {\n      alert(\"Please fill all required fields.\");\n      return;\n    }\n    setIsAdding(true);\n    try {\n      const token = localStorage.getItem(\"auth_token\");\n      if (!token) return alert(\"You must be logged in to add a flight.\");\n\n      const body = {\n        date,\n        flight_number: flightNumber || \"MANUAL\",\n        airline_name: airline || \"Manual Entry\",\n        airline_code: airlineCode || null,\n        departure: departureAirport.ident || departureAirport.iata || \"N/A\",\n        arrival: arrivalAirport.ident || arrivalAirport.iata || \"N/A\",\n        departure_latitude: departureAirport.latitude ?? 0,\n        departure_longitude: departureAirport.longitude ?? 0,\n        arrival_latitude: arrivalAirport.latitude ?? 0,\n        arrival_longitude: arrivalAirport.longitude ?? 0,\n        departure_time: departureTime || null,\n        arrival_time: arrivalTime || null,\n        status,\n        user_id: userId,\n      };\n\n      const res = await fetch(\"/api/flights\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(body),\n      });\n\n      if (res.ok) {\n        handleReset();\n        if (onSuccess) onSuccess();\n      } else {\n        const err = await res.json();\n        alert(\"Error: \" + (err.message || \"Unknown error\"));\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Error adding flight. Please try again.\");\n    } finally {\n      setIsAdding(false);\n    }\n  };\n\n  return (\n    <div className=\"w-full mx-auto p-4 space-y-4 relative\">\n\n\n      {/* Scan Button */}\n      <div className=\"flex justify-center\">\n        <Button\n          className=\"bg-green-600 border-green-600 hover:bg-green-500 text-black rounded-full px-9 py-4 font-semibold flex items-center gap-2\"\n          onClick={() => document.getElementById(\"boardingPassInput\")?.click()}\n        >\n          <ScanText className=\"w-4 h-4\" /> Scan Boarding Pass\n        </Button>\n        <input\n          id=\"boardingPassInput\"\n          type=\"file\"\n          accept=\"image/*\"\n          capture=\"environment\"\n          onChange={(e) => console.log(e.target.files)}\n          className=\"hidden\"\n        />\n      </div>\n\n      {/* Divider */}\n      <div className=\"text-center text-gray-400 font-semibold my-2\">-or-</div>\n      <div className=\"text-center text-gray-400 mb-4\">Enter details manually</div>\n\n      {/* Airline */}\n      <div className=\"relative w-full\">\n        <Label className=\"text-green-400 mb-1\">Airline</Label>\n        <Input\n          value={airline}\n          onChange={(e) => setAirline(e.target.value)}\n          placeholder=\"e.g. IndiGo\"\n          className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n        />\n      </div>\n\n      {/* Flight Number */}\n      <div className=\"w-full\">\n        <Label className=\"text-green-400 mb-1\">Flight Number</Label>\n        <Input\n          value={flightNumber}\n          onChange={(e) => setFlightNumber(e.target.value)}\n          placeholder=\"e.g. 6E-6289\"\n          className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n        />\n      </div>\n\n      {/* Departure & Arrival */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 w-full\">\n        <div className=\"relative w-full\">\n          <Label className=\"text-green-400 mb-1\">Departure Airport</Label>\n          <Input\n            value={departureInput}\n            onChange={(e) => setDepartureInput(e.target.value)}\n            placeholder=\"e.g. DEL\"\n            className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n          />\n        </div>\n        <div className=\"relative w-full\">\n          <Label className=\"text-green-400 mb-1\">Arrival Airport</Label>\n          <Input\n            value={arrivalInput}\n            onChange={(e) => setArrivalInput(e.target.value)}\n            placeholder=\"e.g. BOM\"\n            className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n          />\n        </div>\n      </div>\n\n      {/* Date & Time */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 w-full\">\n        <div>\n          <Label className=\"text-green-400 mb-1\">Date</Label>\n          <Input\n            type=\"date\"\n            value={date}\n            onChange={(e) => setDate(e.target.value)}\n            className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n          />\n        </div>\n        <div>\n          <Label className=\"text-green-400 mb-1\">Departure Time</Label>\n          <Input\n            type=\"time\"\n            value={departureTime}\n            onChange={(e) => setDepartureTime(e.target.value)}\n            className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n          />\n        </div>\n        <div>\n          <Label className=\"text-green-400 mb-1\">Arrival Time</Label>\n          <Input\n            type=\"time\"\n            value={arrivalTime}\n            onChange={(e) => setArrivalTime(e.target.value)}\n            className=\"w-full bg-gray-800 text-green-100 border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n          />\n        </div>\n      </div>\n\n      {/* Status */}\n      <div className=\"w-full\">\n        <Label className=\"text-green-400 mb-1\">Status</Label>\n        <select\n          value={status}\n          onChange={(e) => setStatus(e.target.value)}\n          className=\"w-full p-2 bg-gray-800 text-green-100 border border-gray-600 rounded-lg focus:ring-2 focus:ring-green-400\"\n        >\n          <option value=\"scheduled\">Scheduled</option>\n          <option value=\"landed\">Landed</option>\n        </select>\n      </div>\n\n      {/* Buttons */}\n      <div className=\"flex gap-4 mt-2\">\n        <Button\n          className=\"bg-green-600 border-green-600 hover:bg-green-500 text-black rounded-full px-6 py-4 font-semibold flex-1\"\n          onClick={handleAddFlight}\n        >\n          Add Flight\n        </Button>\n        <Button\n          className=\"bg-gray-700 border-green-600 hover:bg-gray-600 text-white rounded-full px-6 py-4 font-semibold\"\n          onClick={handleReset}\n        >\n          Reset\n        </Button>\n      </div>\n\n      {/* Overlay animation */}\n      <AnimatePresence>\n        {(isAdding || isScanning) && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 flex flex-col justify-center items-center bg-black/70 z-50\"\n          >\n            <FaceAlienIcon className=\"w-12 h-12 text-green-400 drop-shadow-xl animate-pulse\" />\n            <span className=\"text-green-400 font-bold text-lg mt-2\">\n              {isAdding\n                ? \"Inserting data...\"\n                : `Scanning Boarding Pass (${scanProgress}%)`}\n            </span>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n","size_bytes":12372},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/pages/Register.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Loader2, Eye, EyeOff, createLucideIcon } from \"lucide-react\";\nimport { faceAlien } from \"@lucide/lab\";\n\nimport { registerUserSchema, type RegisterUser } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Alien icon component\nconst FaceAlien = createLucideIcon(\"FaceAlien\", faceAlien);\n\nconst countries = [\n  \"Argentina\", \"Australia\", \"Austria\", \"Belgium\", \"Brazil\", \"Canada\", \"China\",\n  \"Denmark\", \"Egypt\", \"Finland\", \"France\", \"Germany\", \"Greece\", \"Hungary\",\n  \"Iceland\", \"India\", \"Indonesia\", \"Ireland\", \"Israel\", \"Italy\", \"Japan\",\n  \"Kenya\", \"Luxembourg\", \"Malaysia\", \"Mexico\", \"Morocco\", \"Netherlands\",\n  \"New Zealand\", \"Nigeria\", \"Norway\", \"Pakistan\", \"Peru\", \"Philippines\",\n  \"Poland\", \"Portugal\", \"Qatar\", \"Romania\", \"Russia\", \"Saudi Arabia\",\n  \"Singapore\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Switzerland\",\n  \"Thailand\", \"Turkey\", \"UAE\", \"UK\", \"USA\", \"Vietnam\"\n].sort();\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [error, setError] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      name: \"\",\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      country: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterUser) => {\n      const res = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      const result = await res.json();\n      if (!res.ok) throw new Error(result?.message || \"Registration failed\");\n      return result;\n    },\n    onSuccess: async () => {\n      toast({ title: \"Account created!\", description: \"Welcome to ...sinceonearth 👽\" });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setTimeout(() => setLocation(\"/dashboard\"), 800);\n    },\n    onError: (err: any) => {\n      setError(err.message || \"Registration failed\");\n    },\n  });\n\n  const onSubmit = (data: RegisterUser) => {\n    setError(\"\");\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <motion.div\n      className=\"min-h-screen flex flex-col items-center justify-center p-4 bg-background font-sans\"\n      initial={{ opacity: 0, y: 15 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -10 }}\n      transition={{ duration: 0.6, ease: \"easeInOut\" }}\n    >\n      <div className=\"w-[320px] max-w-md space-y-6\">\n        {/* Alien Logo */}\n        <div className=\"flex flex-col items-center mb-6 space-y-4\">\n          <FaceAlien className=\"h-24 w-24 text-green-600 animate-pulse\" />\n        </div>\n\n        {/* Headings */}\n        <div className=\"text-center mb-8 space-y-2\">\n          <h1 className=\"text-2xl font-semibold text-white\">\n            Join SinceOnEarth\n          </h1>\n          <p className=\"text-xs text-white\">\n            Create your account to explore the galaxy 🌍\n          </p>\n        </div>\n\n        {/* Register Form */}\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <Input\n            placeholder=\"Full name\"\n            className=\"w-full h-14 bg-black text-white border border-white focus:border-green-500 focus:ring focus:ring-green-600\"\n            {...form.register(\"name\")}\n          />\n          {form.formState.errors.name && (\n            <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.name.message}</p>\n          )}\n\n          <Input\n            placeholder=\"Username\"\n            className=\"w-full h-14 bg-black text-white border border-white focus:border-green-500 focus:ring focus:ring-green-600\"\n            {...form.register(\"username\")}\n          />\n          {form.formState.errors.username && (\n            <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.username.message}</p>\n          )}\n\n          <Input\n            type=\"email\"\n            placeholder=\"Email\"\n            className=\"w-full h-14 bg-black text-white border border-white focus:border-green-500 focus:ring focus:ring-green-600\"\n            {...form.register(\"email\")}\n          />\n          {form.formState.errors.email && (\n            <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.email.message}</p>\n          )}\n\n          <div className=\"relative\">\n            <Input\n              type={showPassword ? \"text\" : \"password\"}\n              placeholder=\"Password\"\n              className=\"w-full h-14 bg-black text-white border border-white focus:border-green-500 focus:ring focus:ring-green-600 pr-10\"\n              {...form.register(\"password\")}\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white hover:text-green-500\"\n              aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n            >\n              {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </button>\n            {form.formState.errors.password && (\n              <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.password.message}</p>\n            )}\n          </div>\n\n          <select\n            {...form.register(\"country\")}\n            className=\"w-full h-14 rounded-md border border-white bg-black text-white px-3 text-base focus:outline-none focus:ring-2 focus:ring-green-500\"\n          >\n            <option value=\"\">Select your country</option>\n            {countries.map((c) => (\n              <option key={c} value={c} className=\"bg-black text-white\">\n                {c}\n              </option>\n            ))}\n          </select>\n          {form.formState.errors.country && (\n            <p className=\"text-sm text-destructive mt-1\">{form.formState.errors.country.message}</p>\n          )}\n\n          {error && <p className=\"text-sm text-destructive text-center\">{error}</p>}\n\n          <Button\n            type=\"submit\"\n            disabled={registerMutation.isPending}\n            className=\"w-full h-14 bg-green-100 text-black border-2 border-green-500 hover:bg-green-200 rounded-full font-semibold\"\n          >\n            {registerMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Signing up...\n              </>\n            ) : (\n              \"Sign Up\"\n            )}\n          </Button>\n        </form>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm space-y-4\">\n          <div>\n            <span className=\"text-white\">Already have an account? </span>\n            <Link href=\"/login\">\n              <span className=\"text-green-600 hover:underline cursor-pointer\">Log in</span>\n            </Link>\n          </div>\n\n          <span className=\"inline-block px-4 py-2 rounded-full border border-green-600 text-green-600 font-semibold text-xs\">\n            Created by व्रज पटेल\n          </span>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":7487},"client/src/lib/pwaDetection.ts":{"content":"export function isPWA(): boolean {\n  const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n  const isIOS = /iPhone|iPad|iPod/.test(navigator.userAgent);\n  const isIOSStandalone = (window.navigator as any).standalone === true;\n  \n  return isStandalone || (isIOS && isIOSStandalone);\n}\n\nexport function isMobileDevice(): boolean {\n  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n}\n\nexport function registerServiceWorker(): void {\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker\n        .register('/service-worker.js')\n        .then((registration) => {\n          console.log('[PWA] Service Worker registered:', registration.scope);\n          \n          registration.addEventListener('updatefound', () => {\n            const newWorker = registration.installing;\n            if (newWorker) {\n              newWorker.addEventListener('statechange', () => {\n                if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                  console.log('[PWA] New content available, please refresh');\n                }\n              });\n            }\n          });\n        })\n        .catch((error) => {\n          console.error('[PWA] Service Worker registration failed:', error);\n        });\n    });\n  }\n}\n\nlet deferredPrompt: any = null;\n\nexport function setupInstallPrompt(onInstallAvailable?: () => void): void {\n  window.addEventListener('beforeinstallprompt', (e) => {\n    e.preventDefault();\n    deferredPrompt = e;\n    \n    if (onInstallAvailable) {\n      onInstallAvailable();\n    }\n  });\n\n  window.addEventListener('appinstalled', () => {\n    console.log('[PWA] App installed successfully');\n    deferredPrompt = null;\n  });\n}\n\nexport async function showInstallPrompt(): Promise<boolean> {\n  if (!deferredPrompt) {\n    return false;\n  }\n\n  deferredPrompt.prompt();\n  const { outcome } = await deferredPrompt.userChoice;\n  console.log('[PWA] Install prompt outcome:', outcome);\n  \n  deferredPrompt = null;\n  return outcome === 'accepted';\n}\n","size_bytes":2112},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"ios/App/App/AppDelegate.swift":{"content":"import UIKit\nimport Capacitor\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n    var window: UIWindow?\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n\n    func applicationWillResignActive(_ application: UIApplication) {\n        // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.\n        // Use this method to pause ongoing tasks, disable timers, and invalidate graphics rendering callbacks. Games should use this method to pause the game.\n    }\n\n    func applicationDidEnterBackground(_ application: UIApplication) {\n        // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later.\n        // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    }\n\n    func applicationWillEnterForeground(_ application: UIApplication) {\n        // Called as part of the transition from the background to the active state; here you can undo many of the changes made on entering the background.\n    }\n\n    func applicationDidBecomeActive(_ application: UIApplication) {\n        // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.\n    }\n\n    func applicationWillTerminate(_ application: UIApplication) {\n        // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.\n    }\n\n    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        // Called when the app was launched with a url. Feel free to add additional processing here,\n        // but if you want the App API to support tracking app url opens, make sure to keep this call\n        return ApplicationDelegateProxy.shared.application(app, open: url, options: options)\n    }\n\n    func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {\n        // Called when the app was launched with an activity, including Universal Links.\n        // Feel free to add additional processing here, but if you want the App API to support\n        // tracking app url opens, make sure to keep this call\n        return ApplicationDelegateProxy.shared.application(application, continue: userActivity, restorationHandler: restorationHandler)\n    }\n\n}\n","size_bytes":3031},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/MenuBar.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { ChevronDown, LogOut, BarChart3, Plane, Building2, Shield } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport function MenuBar() {\n  const { user, logout } = useAuth();\n  const [location, navigate] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const menuItems = [\n    { path: \"/dashboard\", icon: BarChart3 },\n    { path: \"/trips\", icon: Plane },\n    { path: \"/stayins\", icon: Building2 },\n  ];\n\n  if (user?.is_admin) {\n    menuItems.push({ path: \"/admin\", icon: Shield });\n  }\n\n  // Find the current page icon\n  const currentPage = menuItems.find((item) => \n    location === item.path || (item.path === \"/dashboard\" && location === \"/\")\n  ) || menuItems[0];\n  \n  const CurrentIcon = currentPage.icon;\n\n  const handleNavigation = (path: string) => {\n    navigate(path);\n    setIsOpen(false);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setIsOpen(false);\n  };\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") setIsOpen(false);\n    };\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleEscape);\n      return () => document.removeEventListener(\"keydown\", handleEscape);\n    }\n  }, [isOpen]);\n\n  return (\n    <>\n      <button\n        onClick={() => setIsOpen(true)}\n        className=\"flex items-center gap-1 h-10 px-3 rounded-full bg-white/20 hover:bg-white/30 transition-all duration-300 text-white\"\n      >\n        <CurrentIcon className=\"h-5 w-5\" />\n        <ChevronDown className=\"h-4 w-4\" />\n      </button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            <motion.div\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              exit={{ opacity: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"fixed inset-0 z-50\"\n              onClick={() => setIsOpen(false)}\n            />\n            <motion.div\n              initial={{ opacity: 0, scale: 0.9 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.9 }}\n              transition={{ duration: 0.2 }}\n              className=\"fixed right-4 top-20 z-50 bg-black/40 backdrop-blur-2xl border border-green-400/30 rounded-full shadow-2xl shadow-green-500/20 overflow-hidden\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"flex flex-col p-3 gap-2\">\n                {menuItems.map((item) => {\n                  const Icon = item.icon;\n                  const isActive = location === item.path || (item.path === \"/dashboard\" && location === \"/\");\n                  return (\n                    <button\n                      key={item.path}\n                      onClick={() => handleNavigation(item.path)}\n                      className={`flex items-center justify-center p-3 rounded-full transition-all duration-200 ${\n                        isActive\n                          ? \"bg-green-500/30 text-white ring-2 ring-green-400/50 shadow-lg shadow-green-500/30\"\n                          : \"text-neutral-400 hover:text-white hover:bg-white/10\"\n                      }`}\n                    >\n                      <Icon className=\"h-5 w-5\" />\n                    </button>\n                  );\n                })}\n                <div className=\"h-px bg-green-400/20 mx-2\" />\n                <button\n                  onClick={handleLogout}\n                  className=\"flex items-center justify-center p-3 rounded-full text-red-400 hover:bg-red-500/20 hover:text-red-300 transition-all duration-200\"\n                >\n                  <LogOut className=\"h-5 w-5\" />\n                </button>\n              </div>\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </>\n  );\n}\n","size_bytes":3908},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"light\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const storedTheme = localStorage.getItem(\"theme\") as Theme;\n    if (storedTheme) {\n      return storedTheme;\n    }\n    \n    // Use system preference if no stored theme\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return \"dark\";\n    }\n    \n    return defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1377},"android/app/src/main/java/com/sinceonearth/app/MainActivity.java":{"content":"package com.sinceonearth.app;\n\nimport com.getcapacitor.BridgeActivity;\n\npublic class MainActivity extends BridgeActivity {}\n","size_bytes":124},"client/src/pages/GetStarted.tsx":{"content":"\"use client\";\n\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport {\n  Globe,\n  Plane,\n  Ruler,\n  MapPin,\n  Building2,\n  TowerControl,\n  Apple,\n} from \"lucide-react\";\n\nconst slides = [\n  {\n    id: 1,\n    title: (\n      <>\n        Track your <br /> Adventures      </>\n    ),\n    text: \"Log every journey you take across cities, countries, and continents — with an interactive world view.\",\n  },\n  {\n    id: 2,\n    title: (\n      <>\n        Earn as you <br /> Explore\n      </>\n    ),\n    text: \"Collect country stamps, explore your flight stats, and watch your travel story unfold beautifully.\",\n  },\n  {\n    id: 3,\n    title: (\n      <>\n        Visualize Your <br /> Journey\n      </>\n    ),\n    text: \"See your total flights, kilometers, and destinations all in one place like your own cosmic travel log.\",\n  },\n];\n\nconst icons = [\n  { icon: Globe, color: \"#a855f7\" },\n  { icon: Plane, color: \"#22c55e\" },\n  { icon: MapPin, color: \"#ec4899\" },\n];\n\nexport default function GetStarted() {\n  const [, navigate] = useLocation();\n  const [index, setIndex] = useState(0);\n  const [iconIndex, setIconIndex] = useState(0);\n\n  useEffect(() => {\n    const textInterval = setInterval(() => {\n      setIndex((prev) => (prev + 1) % slides.length);\n    }, 3500);\n\n    const iconInterval = setInterval(() => {\n      setIconIndex((prev) => (prev + 1) % icons.length);\n    }, 3500);\n\n    return () => {\n      clearInterval(textInterval);\n      clearInterval(iconInterval);\n    };\n  }, []);\n\n  const slide = slides[index];\n  const CurrentIcon = icons[iconIndex].icon;\n  const iconColor = icons[iconIndex].color;\n\n  return (\n    <motion.div\n      className=\"min-h-screen w-full flex flex-col items-center justify-between bg-black text-white px-6 pt-40 pb-10 relative\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n      style={{\n        fontFamily:\n          '-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif',\n      }}\n    >\n\n      {/* Icon Container with fixed height to prevent jumping */}\n      <div className=\"h-30 flex items-center justify-center\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={iconIndex}\n            initial={{ opacity: 0, scale: 0.6 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 1 }}\n          >\n            <CurrentIcon\n              className=\"w-40 h-40\"\n              style={{ color: iconColor }}\n            />\n          </motion.div>\n        </AnimatePresence>\n      </div>\n\n      {/* Slide Text */}\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={slide.id}\n          initial={{ opacity: 0, y: 50 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -50 }}\n          transition={{ duration: 0.8 }}\n          className=\"text-center max-w-md\"\n        >\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-br from-green-400 to-green-600 bg-clip-text text-transparent whitespace-pre-line\">\n            {slide.title}\n          </h1>\n          <p className=\"text-neutral-400 text-lg leading-relaxed\">{slide.text}</p>\n        </motion.div>\n      </AnimatePresence>\n\n      {/* Bottom Card */}\n      <motion.div\n        initial={{ opacity: 0, y: 40 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.3 }}\n        className=\"w-full max-w-md bg-white text-black p-6 space-y-5 shadow-xl rounded-3xl border border-gray-200\"\n      >\n        <button\n          onClick={() => navigate(\"/register\")}\n          className=\"w-full bg-black text-white text-lg font-semibold py-4 rounded-full\"\n        >\n          Create new account\n        </button>\n\n        <div\n          onClick={() => navigate(\"/login\")}\n          className=\"text-center text-sm underline text-gray-600 cursor-pointer select-none\"\n        >\n          I already have an account\n        </div>\n      </motion.div>\n    </motion.div>\n  );\n}\n","size_bytes":4114},"client/src/components/examples/ThemeProvider.tsx":{"content":"import { ThemeProvider as ThemeProviderComponent } from \"../ThemeProvider\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"../ThemeProvider\";\n\nfunction ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n  return (\n    <div className=\"flex flex-col items-center gap-4 p-8\">\n      <p className=\"text-foreground\">Current theme: {theme}</p>\n      <Button onClick={() => setTheme(theme === \"light\" ? \"dark\" : \"light\")}>\n        Toggle Theme\n      </Button>\n    </div>\n  );\n}\n\nexport default function ThemeProviderExample() {\n  return (\n    <ThemeProviderComponent>\n      <ThemeToggle />\n    </ThemeProviderComponent>\n  );\n}\n","size_bytes":654},"client/src/components/AddStayInForm.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Building2, MapPin, Calendar, X } from \"lucide-react\";\n\ninterface AddStayInFormProps {\n  userId: string;\n  onSuccess?: () => void;\n  alwaysOpen?: boolean;\n}\n\nexport default function AddStayInForm({\n  userId,\n  onSuccess,\n  alwaysOpen = false,\n}: AddStayInFormProps) {\n  const [isOpen, setIsOpen] = useState(alwaysOpen);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const [formData, setFormData] = useState({\n    name: \"\",\n    city: \"\",\n    country: \"\",\n    check_in: \"\",\n    check_out: \"\",\n    maps_pin: \"\",\n    type: \"HOTEL\",\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n    setLoading(true);\n\n    try {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        setError(\"Authentication required\");\n        setLoading(false);\n        return;\n      }\n\n      const response = await fetch(\"/api/stayins\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        const data = await response.json();\n        throw new Error(data.message || \"Failed to add stay in\");\n      }\n\n      // Reset form\n      setFormData({\n        name: \"\",\n        city: \"\",\n        country: \"\",\n        check_in: \"\",\n        check_out: \"\",\n        maps_pin: \"\",\n        type: \"HOTEL\",\n      });\n\n      if (!alwaysOpen) setIsOpen(false);\n      onSuccess?.();\n    } catch (err: any) {\n      setError(err.message || \"Failed to add stay in\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className={alwaysOpen ? \"w-full\" : \"mb-6\"}>\n      {!isOpen ? (\n        <button\n          onClick={() => setIsOpen(true)}\n          className=\"px-6 py-2 bg-sky-500 hover:bg-sky-600 text-black font-semibold rounded-full transition-all\"\n        >\n          + Add Stay In\n        </button>\n      ) : (\n        <div\n          className={`${\n            alwaysOpen\n              ? \"w-full\"\n              : \"bg-neutral-900 border border-gray-700 rounded-xl p-6 max-w-2xl\"\n          }`}\n        >\n          {/* Header */}\n          {!alwaysOpen ? (\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-xl font-semibold text-sky-400 flex items-center gap-2\">\n                <Building2 size={24} />\n                Add New Stay In\n              </h3>\n              <button\n                onClick={() => setIsOpen(false)}\n                className=\"text-gray-400 hover:text-white transition-colors\"\n              >\n                <X size={24} />\n              </button>\n            </div>\n          ) : (\n            <div className=\"mb-6\">\n              <h2 className=\"text-2xl font-semibold text-sky-400\">\n                Add New Stay In\n              </h2>\n            </div>\n          )}\n\n          {/* Error Alert */}\n          {error && (\n            <div className=\"bg-red-500/20 border border-red-500/40 text-red-400 px-4 py-2 rounded-lg mb-4\">\n              {error}\n            </div>\n          )}\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            {/* Input Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {/* Name */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  Accommodation Name *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"e.g., Hilton Garden Inn\"\n                  className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n                />\n              </div>\n\n              {/* Type */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  Type *\n                </label>\n                <select\n                  name=\"type\"\n                  value={formData.type}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n                >\n                  <option value=\"HOTEL\">Hotel</option>\n                  <option value=\"AIRBNB\">Airbnb</option>\n                  <option value=\"HOSTEL\">Hostel</option>\n                  <option value=\"MOTEL\">Motel</option>\n                </select>\n              </div>\n\n              {/* City */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  City *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"city\"\n                  value={formData.city}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"e.g., New York\"\n                  className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n                />\n              </div>\n\n              {/* Country */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  Country *\n                </label>\n                <input\n                  type=\"text\"\n                  name=\"country\"\n                  value={formData.country}\n                  onChange={handleChange}\n                  required\n                  placeholder=\"e.g., USA\"\n                  className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n                />\n              </div>\n\n              {/* Check-in */}\n              <div>\n                <label className=\"flex items-center gap-1 text-sm font-medium text-gray-300 mb-1\">\n                  <Calendar size={14} />\n                  Check-in Date *\n                </label>\n                <input\n                  type=\"date\"\n                  name=\"check_in\"\n                  value={formData.check_in}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n                />\n              </div>\n\n              {/* Check-out */}\n              <div>\n                <label className=\"flex items-center gap-1 text-sm font-medium text-gray-300 mb-1\">\n                  <Calendar size={14} />\n                  Check-out Date *\n                </label>\n                <input\n                  type=\"date\"\n                  name=\"check_out\"\n                  value={formData.check_out}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n                />\n              </div>\n            </div>\n\n            {/* Google Maps Link */}\n            <div>\n              <label className=\"flex items-center gap-1 text-sm font-medium text-gray-300 mb-1\">\n                <MapPin size={14} />\n                Google Maps Link (optional)\n              </label>\n              <input\n                type=\"url\"\n                name=\"maps_pin\"\n                value={formData.maps_pin}\n                onChange={handleChange}\n                placeholder=\"https://maps.app.goo.gl/...\"\n                className=\"w-full px-3 py-2 bg-neutral-800 border border-gray-600 rounded-lg text-white focus:outline-none focus:border-sky-500\"\n              />\n            </div>\n\n            {/* Buttons */}\n            <div className=\"flex gap-3 pt-2\">\n              <button\n                type=\"submit\"\n                disabled={loading}\n                className=\"flex-1 px-6 py-2 bg-sky-500 hover:bg-sky-600 text-black font-semibold rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed\"\n              >\n                {loading ? \"Adding...\" : \"Add Stay In\"}\n              </button>\n              {!alwaysOpen && (\n                <button\n                  type=\"button\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"px-6 py-2 bg-neutral-700 hover:bg-neutral-600 text-white font-semibold rounded-lg transition-all\"\n                >\n                  Cancel\n                </button>\n              )}\n            </div>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8989},"client/src/components/FlightsDashboard.tsx":{"content":"\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardContent, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { format } from \"date-fns\";\nimport type { Flight } from \"@shared/schema\";\nimport { getAuthToken } from \"@/lib/queryClient\";\nimport { Plane, CalendarDays, Clock } from \"lucide-react\";\n\nexport default function FlightsDashboard() {\n  const token = getAuthToken();\n\n  const {\n    data: flights = [],\n    isLoading,\n    isError,\n    error,\n  } = useQuery<Flight[]>({\n    queryKey: [\"flights\", token],\n    enabled: !!token,\n    queryFn: async () => {\n      if (!token) {\n        if (process.env.NODE_ENV === \"development\") {\n          console.warn(\"⚠️ No auth token found in localStorage\");\n        }\n        throw new Error(\"Unauthorized - Missing token\");\n      }\n\n      const res = await fetch(\"/api/flights\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: `Bearer ${token}`,\n        },\n        credentials: \"include\",\n      });\n\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(text || `Failed to fetch flights (${res.status})`);\n      }\n\n      const data = await res.json();\n      if (!Array.isArray(data)) throw new Error(\"Invalid response from API\");\n      return data as Flight[];\n    },\n  });\n\n  // 🌀 Loading skeletons\n  if (isLoading)\n    return (\n      <div className=\"flex flex-col gap-4\">\n        <Skeleton className=\"h-8 w-1/3 bg-gray-700\" />\n        {[...Array(3)].map((_, i) => (\n          <Skeleton key={i} className=\"h-24 w-full bg-gray-700\" />\n        ))}\n      </div>\n    );\n\n  // ❌ Error state\n  if (isError)\n    return (\n      <p className=\"text-red-400 text-center mt-10\">\n        ⚠️ Failed to load flights. {(error as Error)?.message}\n      </p>\n    );\n\n  // 🕳️ Empty state\n  if (!flights.length)\n    return (\n      <p className=\"text-gray-400 text-center mt-20\">\n        No flights added yet. Start by adding your first flight ✈️\n      </p>\n    );\n\n  // 📅 Group flights by year\n  const groupedFlights = flights.reduce<Record<string, Flight[]>>((acc, f) => {\n    const year = f.date?.split(\"-\")[0] ?? \"Unknown\";\n    acc[year] = acc[year] || [];\n    acc[year].push(f);\n    return acc;\n  }, {});\n\n  const sortedYears = Object.keys(groupedFlights).sort((a, b) => +b - +a);\n\n  return (\n    <div className=\"flex flex-col gap-8\">\n      {sortedYears.map((year) => (\n        <div key={year}>\n          <h2 className=\"text-xl font-semibold mb-3 text-green-400\">{year}</h2>\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {groupedFlights[year].map((f) => (\n              <Card\n                key={f.id}\n                className=\"bg-neutral-900 border border-green-700 hover:border-green-500 transition-all rounded-2xl shadow-md\"\n              >\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between text-green-400 text-lg\">\n                    <span>\n                      {f.departure} → {f.arrival}\n                    </span>\n                    <Plane className=\"w-4 h-4 text-green-400\" />\n                  </CardTitle>\n                </CardHeader>\n\n                <CardContent className=\"text-sm text-gray-300 space-y-1.5\">\n                  <p className=\"font-medium\">\n                    {f.airline_name || \"Unknown Airline\"}{\" \"}\n                    {f.flight_number && (\n                      <span className=\"text-gray-400\">• {f.flight_number}</span>\n                    )}\n                  </p>\n\n                  <p className=\"flex items-center gap-1\">\n                    <CalendarDays className=\"w-4 h-4 text-green-500\" />\n                    {f.date ? format(new Date(f.date), \"dd MMM yyyy\") : \"N/A\"}\n                  </p>\n\n                  <p className=\"flex items-center gap-1\">\n                    <Clock className=\"w-4 h-4 text-green-500\" />\n                    {f.distance\n                      ? `${f.distance.toFixed(0)} km`\n                      : \"Unknown distance\"}{\" \"}\n                    • {f.duration || \"N/A\"}\n                  </p>\n\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Status:{\" \"}\n                    <span className=\"text-green-400\">\n                      {f.status || \"Scheduled\"}\n                    </span>\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":4555},"client/src/pages/TripsPageWrapper.tsx":{"content":"\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Header } from \"@/components/Header\";\nimport TripHistory from \"@/pages/TripHistory\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Flight } from \"@shared/schema\";\n\nexport default function TripsPageWrapper() {\n  const { token, user } = useAuth();\n\n  const { data: flights = [], refetch } = useQuery<Flight[]>({\n    queryKey: [\"user-flights\", token],\n    enabled: !!token,\n    queryFn: async () => {\n      if (!token) return [];\n      const res = await apiRequest(\"GET\", \"/api/flights\", null, token);\n      if (!res.ok) throw new Error(\"Failed to fetch flights\");\n      return res.json();\n    },\n  });\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen w-screen bg-black text-white flex flex-col\">\n      <Header />\n      <div className=\"flex-1 overflow-y-auto pt-20 px-4\">\n        <TripHistory flights={flights} userId={user.id} onRefresh={refetch} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":1034},"client/src/types.ts":{"content":"/* -------------------------------------------------------------------------- */\n/* 🏷️ Stamp Type (for Achievements / UI)                                      */\n/* -------------------------------------------------------------------------- */\nexport interface UIStamp {\n  id: string;        // unique ID of the stamp (string)\n  name: string;      // readable country name, e.g. \"Japan\"\n  isoCode: string;   // ISO country code, e.g. \"JP\"\n  imageUrl: string;  // path to the image, e.g. \"/stamps/jp.png\"\n}\n\n/* -------------------------------------------------------------------------- */\n/* ✈️ AviationStack Flight Type (for AddFlightModal)                          */\n/* -------------------------------------------------------------------------- */\n// Original raw API structure\nexport interface AviationStackFlight {\n  flight_date?: string;\n  flight_status?: string;\n  airline?: { name?: string; iata?: string };\n  flight?: {\n    iata?: string;\n    number?: string;\n    codeshared?: {\n      airline_name?: string;\n      airline_iata?: string;\n      airline_icao?: string;\n      flight_number?: string;\n      flight_iata?: string;\n      flight_icao?: string;\n    };\n  };\n  departure?: {\n    iata?: string;\n    airport?: string;\n    scheduled?: string; // departure time\n    terminal?: string;\n    latitude?: number;\n    longitude?: number;\n  };\n  arrival?: {\n    iata?: string;\n    airport?: string;\n    scheduled?: string; // arrival time\n    terminal?: string;\n    latitude?: number;\n    longitude?: number;\n  };\n  aircraft?: { model?: string };\n  flight_time?: string;\n  distance?: number;\n}\n\n/* -------------------------------------------------------------------------- */\n/* ✅ Normalized structure your frontend uses                                  */\n/* -------------------------------------------------------------------------- */\nexport interface NormalizedFlight {\n  id: string;             // unique flight ID\n  user_id: string;        // user who owns the flight\n  date: string;           // flight date (YYYY-MM-DD)\n  status: string;         // status of the flight (\"Scheduled\", \"Landed\", etc.)\n  \n  dep_iata: string;       // departure airport IATA\n  dep_airport: string;    // departure airport name\n  dep_time?: string;      // optional departure time\n  dep_terminal?: string;  // optional departure terminal\n  dep_latitude?: number | null;\n  dep_longitude?: number | null;\n  \n  arr_iata: string;       // arrival airport IATA\n  arr_airport: string;    // arrival airport name\n  arr_time?: string;      // optional arrival time\n  arr_terminal?: string;  // optional arrival terminal\n  arr_latitude?: number | null;\n  arr_longitude?: number | null;\n  \n  airline_name: string;   // airline name\n  flight_number: string;  // flight number\n  created_at?: Date | null; // record creation time\n}\n\n","size_bytes":2819},"design_guidelines.md":{"content":"# Design Guidelines: Flight Tracker Web Application\n\n## Design Approach: Reference-Based (Travel & Aviation Apps)\n\n**Primary References:** App in the Air, Flighty, TripIt  \n**Design Philosophy:** Clean, data-dense aviation interface with professional travel app aesthetics. Focus on readability, efficient data presentation, and aviation-inspired visual language.\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Light Mode:**\n- Primary: 214 100% 50% (Aviation Blue - used for headers, primary actions, flight routes)\n- Secondary: 214 20% 30% (Dark Blue-Gray - text, borders)\n- Background: 0 0% 98% (Off-white for main surfaces)\n- Surface: 0 0% 100% (White for cards and elevated elements)\n- Accent: 24 95% 53% (Orange - for active flights, alerts, CTAs)\n- Success: 142 76% 36% (Green - completed flights)\n- Muted: 214 15% 70% (Light Blue-Gray - borders, disabled states)\n\n**Dark Mode:**\n- Primary: 214 100% 60% (Lighter blue for contrast)\n- Secondary: 214 20% 85% (Light text)\n- Background: 222 47% 11% (Deep navy background)\n- Surface: 217 32% 17% (Elevated card surface)\n- Accent: 24 95% 60% (Brighter orange for visibility)\n- Success: 142 71% 45% (Lighter green)\n- Muted: 214 15% 40% (Darker muted for borders)\n\n### B. Typography\n\n**Font Stack:**\n- Primary: 'Inter', system-ui, sans-serif (clean, modern, excellent readability)\n- Monospace: 'JetBrains Mono', monospace (for flight numbers, IATA codes, times)\n\n**Text Hierarchy:**\n- Headers (H1): text-4xl font-bold (Dashboard titles)\n- Headers (H2): text-2xl font-semibold (Section headers)\n- Headers (H3): text-xl font-semibold (Card titles, flight routes)\n- Body: text-base (Main content)\n- Small: text-sm (Metadata, timestamps, terminal info)\n- Tiny: text-xs font-medium uppercase tracking-wide (Labels, IATA codes)\n\n### C. Layout System\n\n**Spacing Primitives:** Use Tailwind units 2, 4, 6, 8, 12, 16, 20, 24\n- Component padding: p-4 to p-6\n- Card spacing: gap-4 to gap-6\n- Section spacing: space-y-8 to space-y-12\n- Page margins: px-6 to px-8, py-8 to py-12\n\n**Container Widths:**\n- Dashboard: max-w-7xl mx-auto\n- Forms: max-w-2xl mx-auto\n- Content sections: max-w-6xl mx-auto\n\n### D. Component Library\n\n**Navigation:**\n- Top navbar with logo, main navigation links, user profile\n- Height: h-16, sticky positioning\n- Background: Surface color with subtle border-b\n- Active state: Primary color with underline indicator\n\n**Flight Cards:**\n- Card design with rounded-xl borders, shadow-md elevation\n- Grid layout: 3 columns on desktop (airline badge | route/times | status)\n- Route visualization: From → To with arrow icon\n- Color-coded status indicators (upcoming=accent, completed=success, cancelled=muted)\n- Flight number in monospace font with airline logo/icon\n\n**Timeline View:**\n- Vertical timeline with connecting lines between flights\n- Year dividers with sticky headers\n- Group consecutive flights into trip cards with subtle background\n- Date labels positioned on left margin\n\n**Statistics Dashboard:**\n- 4-column grid on desktop: Total Flights, Airlines, Countries, Distance\n- Large numbers (text-4xl font-bold) with icons\n- Subtle gradient backgrounds or solid surface cards\n- Bar charts for top airlines/routes using primary color scale\n\n**Forms (Manual Entry):**\n- Two-column layout on desktop for efficient space use\n- Input fields with floating labels or clear label positioning\n- Autocomplete for airports with IATA code display\n- Date/time pickers with aviation-standard formats\n- Primary button for submit with accent color\n\n**Data Tables (Import View):**\n- Striped rows for readability\n- Sticky header on scroll\n- Monospace font for IATA codes and flight numbers\n- Compact padding (py-2 px-4)\n- Hover states with subtle background change\n\n**Import Flow:**\n- Drag-and-drop CSV upload area with dashed border\n- Preview table showing parsed data before import\n- Success confirmation with flight count statistics\n\n### E. Iconography\n\n**Icon Library:** Heroicons (outline style for most UI, solid for active states)\n- Use aviation-specific icons: PaperAirplaneIcon, GlobeAltIcon, ClockIcon\n- Size consistency: w-5 h-5 for inline icons, w-6 h-6 for emphasis\n- Color: currentColor to inherit text colors\n\n### F. Interactions & Animations\n\n**Minimal Motion:**\n- Subtle hover states: scale-[1.02] for cards\n- Transitions: transition-all duration-200\n- Loading states: Pulsing skeleton screens with bg-muted/20\n- NO complex animations - this is a utility app\n\n---\n\n## Page-Specific Guidelines\n\n**Dashboard/Home:**\n- Hero statistics section at top (4-stat grid)\n- Recent flights timeline below with \"View All\" link\n- Optional: Mini route map visualization if feasible\n\n**Flight History:**\n- Filter bar: Year dropdown, airline select, search by airport\n- Timeline view as default\n- Each flight card shows: airline, flight number, route, date, aircraft type\n- Trip grouping with subtle container around consecutive flights\n\n**Add Flight (Manual Entry):**\n- Centered form layout, max-w-2xl\n- Clean input fields with clear labels\n- Autocomplete dropdowns for airports\n- Calendar picker for dates, time inputs for departure/arrival\n- Submit button: \"Add Flight\" with accent color\n\n**CSV Import:**\n- Drop zone with upload icon and instructions\n- Parse and show preview table\n- Confirmation step with data summary\n- Success message with redirect to dashboard\n\n**Statistics:**\n- Multi-metric dashboard with various chart types\n- Top airlines horizontal bar chart\n- Countries visited as badge list\n- Monthly flight activity line graph\n- Total distance with visual representation\n\n---\n\n## Images\n\n**No hero image required** - this is a utility application focused on data visualization. Instead:\n- Airline logos: Use small circular badges (w-8 h-8) next to flight numbers\n- Aircraft type icons: Optional small icons for visual interest\n- Empty states: Illustration of airplane/travel for \"No flights yet\"\n- Background patterns: Subtle topographic/map patterns at 5% opacity for section backgrounds\n\n---\n\n## Accessibility & Responsiveness\n\n- Dark mode toggle in navbar with smooth transition\n- All form inputs maintain consistent styling in both modes\n- Mobile: Single column layouts, collapsible filters, swipeable flight cards\n- Tablet: 2-column grids where appropriate\n- Desktop: Full multi-column layouts as specified\n- Focus states: ring-2 ring-primary with offset\n- Semantic HTML: proper heading hierarchy, nav landmarks","size_bytes":6389},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/auth.ts":{"content":"import { Router, type Request, type Response } from \"express\";\nimport bcrypt from \"bcryptjs\";\nimport { storage } from \"./storage\";\nimport { createToken } from \"./jwt\";\nimport type { RequestWithUser } from \"./routes\"; // adjust path if needed\nimport { requireAuth } from \"./routes\"; // make sure this is exported from routes.ts\n\nconst router = Router();\n\n/* ===============================\n   🧾 REGISTER\n   =============================== */\nrouter.post(\"/register\", async (req: Request, res: Response) => {\n  try {\n    const { name, username, email, password, country } = req.body as {\n      name?: string;\n      username?: string;\n      email?: string;\n      password?: string;\n      country?: string | null;\n    };\n\n    if (!name || !username || !email || !password) {\n      return res.status(400).json({ message: \"All fields required\" });\n    }\n\n    const existingUser = await storage.getUserByUsernameOrEmail(email);\n    if (existingUser) {\n      return res.status(409).json({ message: \"Email already registered\" });\n    }\n\n    const passwordHash = await bcrypt.hash(password, 10);\n\n    const newUser = await storage.createUser({\n      name,\n      username,\n      email,\n      passwordHash,\n      country: country || null,\n    });\n\n    const token = createToken({\n      userId: newUser.id,\n      email: newUser.email,\n      username: newUser.username,\n      isAdmin: !!newUser.is_admin,\n      alien: newUser.alien,\n      country: newUser.country, // <-- include country in JWT\n    });\n\n    return res.status(201).json({\n      message: \"Registration successful\",\n      token,\n      user: {\n        id: newUser.id,\n        email: newUser.email,\n        username: newUser.username,\n        country: newUser.country,\n        alien: newUser.alien,\n        is_admin: !!newUser.is_admin,\n      },\n    });\n  } catch (err) {\n    console.error(\"❌ Register error:\", err);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n/* ===============================\n   🔐 LOGIN\n   =============================== */\nrouter.post(\"/login\", async (req: Request, res: Response) => {\n  try {\n    const { email, password } = req.body as {\n      email?: string;\n      password?: string;\n    };\n\n    if (!email || !password) {\n      return res.status(400).json({ message: \"Email and password required\" });\n    }\n\n    const user = await storage.getUserByUsernameOrEmail(email);\n    if (!user || !user.password_hash) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const isValid = await bcrypt.compare(password, user.password_hash);\n    if (!isValid) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const token = createToken({\n      userId: user.id,\n      email: user.email,\n      username: user.username,\n      isAdmin: !!user.is_admin,\n      alien: user.alien,\n      country: user.country, // <-- include country in JWT\n    });\n\n    return res.json({\n      message: \"Login successful\",\n      token,\n      user: {\n        id: user.id,\n        email: user.email,\n        username: user.username,\n        country: user.country,\n        alien: user.alien,\n        is_admin: !!user.is_admin,\n      },\n    });\n  } catch (err) {\n    console.error(\"❌ Login error:\", err);\n    return res.status(500).json({ message: \"Server error\" });\n  }\n});\n\n/* ===============================\n   🙋 GET AUTHENTICATED USER\n   =============================== */\nrouter.get(\"/user\", requireAuth, (req: RequestWithUser, res: Response) => {\n  const user = req.user;\n\n  if (!user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  res.json({\n    id: user.userId,\n    email: user.email,\n    username: user.username,\n    country: user.country ?? null, // <-- now included\n    alien: user.alien,\n    is_admin: user.isAdmin ?? false,\n  });\n});\n\n/* ===============================\n   Default Export\n=============================== */\nexport default router;\n","size_bytes":3924},"client/src/components/Header.tsx":{"content":"\"use client\";\n\nimport { Icon } from \"lucide-react\";\nimport { faceAlien } from \"@lucide/lab\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { motion } from \"framer-motion\";\nimport { MenuBar } from \"@/components/MenuBar\";\n\nexport function Header() {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"fixed top-0 left-0 z-50 w-full bg-gradient-to-r from-green-500 via-green-600 to-green-500 shadow-lg\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-6\">\n        {/* 👽 Left Section: Alien icon + Welcome capsule */}\n        <div className=\"flex items-center gap-2\">\n          <Link href=\"/\" className=\"flex items-center gap-3\">\n            <div className=\"flex h-10 w-10 items-center justify-center rounded-full bg-white/20 hover:bg-white/30 transition-all duration-300\">\n              <Icon iconNode={faceAlien} className=\"h-6 w-6 text-white\" />\n            </div>\n          </Link>\n\n          <motion.div\n            initial={{ opacity: 0, y: -4 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.4 }}\n            className=\"flex items-center\"\n          >\n            <div className=\"px-4 py-1.5 rounded-full bg-white/20 text-white font-semibold text-sm shadow-sm flex items-center gap-1.5\">\n              <span>alien #{user?.alien ?? \"—\"}</span>\n            </div>\n          </motion.div>\n        </div>\n\n\n\n        {/* 🍔 Menu Bar */}\n        <MenuBar />\n      </div>\n    </header>\n  );\n}\n","size_bytes":1513},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/Dashboard.tsx":{"content":"\"use client\";\n\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport Globe from \"react-globe.gl\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Header } from \"@/components/Header\";\nimport { StatsDashboard } from \"@/components/StatsDashboard\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Flight } from \"@shared/schema\";\n\nconst countryCoordinates: Record<string, { lat: number; lon: number }> = {\n  India: { lat: 20.5937, lon: 78.9629 },\n  USA: { lat: 37.0902, lon: -95.7129 },\n  Canada: { lat: 56.1304, lon: -106.3468 },\n  Germany: { lat: 51.1657, lon: 10.4515 },\n  Other: { lat: 0, lon: 0 },\n};\n\nfunction getCoords(country?: string) {\n  if (!country) return countryCoordinates[\"Other\"];\n  const trimmed = country.trim();\n  return (\n    countryCoordinates[trimmed] ||\n    Object.entries(countryCoordinates).find(\n      ([k]) => k.toLowerCase() === trimmed.toLowerCase()\n    )?.[1] ||\n    countryCoordinates[\"Other\"]\n  );\n}\n\nexport default function Dashboard() {\n  const { token, user } = useAuth();\n  const globeRef = useRef<any>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [dimensions, setDimensions] = useState({ width: 400, height: 400 });\n\n  const { data: flights = [], refetch: refetchFlights } = useQuery<Flight[]>({\n    queryKey: [\"user-flights\", token],\n    enabled: !!token,\n    queryFn: async () => {\n      if (!token) return [];\n      const res = await apiRequest(\"GET\", \"/api/flights\", null, token);\n      if (!res.ok) throw new Error(\"Failed to fetch flights\");\n      return res.json();\n    },\n  });\n\n  const { data: stayins = [], refetch: refetchStayins } = useQuery<any[]>({\n    queryKey: [\"user-stayins\", token],\n    enabled: !!token,\n    queryFn: async () => {\n      if (!token) return [];\n      const res = await apiRequest(\"GET\", \"/api/stayins\", null, token);\n      if (!res.ok) throw new Error(\"Failed to fetch stay ins\");\n      return res.json();\n    },\n  });\n\n  useEffect(() => {\n    if (globeRef.current && user) {\n      const coords = getCoords(user.country);\n      globeRef.current.pointOfView(\n        { lat: coords.lat, lng: coords.lon, altitude: 1.8 },\n        1500\n      );\n    }\n  }, [user]);\n\n  useEffect(() => {\n    const update = () => {\n      if (containerRef.current) {\n        setDimensions({\n          width: containerRef.current.clientWidth,\n          height: containerRef.current.clientHeight,\n        });\n      }\n    };\n    update();\n    window.addEventListener(\"resize\", update);\n    return () => window.removeEventListener(\"resize\", update);\n  }, []);\n\n  const arcsData = useMemo(() => {\n    return flights\n      .filter(\n        (f) =>\n          f.departure_latitude &&\n          f.departure_longitude &&\n          f.arrival_latitude &&\n          f.arrival_longitude\n      )\n      .map((f) => {\n        const R = 6371;\n        const dLat = ((f.arrival_latitude! - f.departure_latitude!) * Math.PI) / 180;\n        const dLon = ((f.arrival_longitude! - f.departure_longitude!) * Math.PI) / 180;\n        const a =\n          Math.sin(dLat / 2) ** 2 +\n          Math.cos((f.departure_latitude! * Math.PI) / 180) *\n            Math.cos((f.arrival_latitude! * Math.PI) / 180) *\n            Math.sin(dLon / 2) ** 2;\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        const distance = R * c;\n\n        const arcAltitude = Math.min(0.25, Math.max(0.05, distance / 20000));\n\n        return {\n          startLat: f.departure_latitude!,\n          startLng: f.departure_longitude!,\n          endLat: f.arrival_latitude!,\n          endLng: f.arrival_longitude!,\n          startLabel: (f.departure || \"\").toUpperCase(),\n          endLabel: (f.arrival || \"\").toUpperCase(),\n          color: \"#22c55e\",\n          altitude: arcAltitude,\n        };\n      });\n  }, [flights]);\n\n  return (\n    <div className=\"min-h-screen w-screen bg-black text-white flex flex-col\">\n      {/* Header with Menu */}\n      <Header />\n      \n      {/* Main Content Area */}\n      <div className=\"flex-1 flex flex-col pt-12 overflow-hidden\">\n        {/* Globe */}\n        <div ref={containerRef} className=\"w-full h-[55vh] relative z-10\">\n          <Globe\n            ref={globeRef}\n            width={dimensions.width}\n            height={dimensions.height}\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-blue-marble.jpg\"\n            backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n            arcsData={arcsData}\n            arcStartLat=\"startLat\"\n            arcStartLng=\"startLng\"\n            arcEndLat=\"endLat\"\n            arcEndLng=\"endLng\"\n            arcColor={() => \"white\"}\n            arcAltitude={(d: any) => d.altitude}\n            arcStroke={0.4}\n            atmosphereColor=\"#22c55e\"\n            atmosphereAltitude={0.25}\n            htmlElementsData={arcsData.flatMap((arc) => [\n              { lat: arc.startLat, lng: arc.startLng },\n              { lat: arc.endLat, lng: arc.endLng },\n            ])}\n            htmlElement={() => {\n              const el = document.createElement(\"div\");\n              el.style.borderRadius = \"50%\";\n              el.style.width = \"6px\";\n              el.style.height = \"6px\";\n              el.style.background = \"#22c55e\";\n              return el;\n            }}\n          />\n        </div>\n\n        {/* Stats Content */}\n        <div className=\"flex-1 overflow-y-auto px-3 py-3 md:px-1\">\n          <StatsDashboard\n            flights={flights}\n            stayins={stayins}\n            totalFlights={flights.length}\n            totalStayins={new Set(stayins.map((s: any) => s.name)).size}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5683},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/hooks/useFlights.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Flight } from \"@shared/schema\";\n\nexport function useFlights() {\n  const { token } = useAuth();\n\n  const query = useQuery<Flight[]>({\n    queryKey: [\"flights\"],\n    enabled: !!token, // ✅ only run if logged in\n    staleTime: 1000 * 60 * 5, // cache for 5 mins\n    retry: 1, // only retry once if it fails\n    queryFn: async () => {\n      if (!token) throw new Error(\"No auth token found\");\n\n      const res = await apiRequest(\"GET\", \"/api/flights\", null, token);\n\n      if (!res.ok) {\n        const text = await res.text();\n        throw new Error(`Failed to fetch flights: ${text || res.status}`);\n      }\n\n      const data = await res.json();\n      if (!Array.isArray(data)) throw new Error(\"Invalid flights data\");\n\n      return data as Flight[];\n    },\n  });\n\n  return {\n    flights: query.data ?? [],\n    isLoading: query.isLoading,\n    isError: query.isError,\n    error: query.error,\n    refetch: query.refetch,\n  };\n}\n","size_bytes":1081},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"server/index.ts":{"content":"// ==================================================\n// 🌍 Environment Setup\n// ==================================================\nimport dotenv from \"dotenv\";\ndotenv.config();\n\nprocess.env.NODE_ENV ||= \"development\";\n\nconsole.log(\"🔧 Loaded environment:\", {\n  hasDatabaseUrl: Boolean(process.env.DATABASE_URL),\n  hasSessionSecret: Boolean(process.env.SESSION_SECRET),\n  nodeEnv: process.env.NODE_ENV,\n});\n\n// ==================================================\n// 🧱 Import Dependencies\n// ==================================================\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport cors from \"cors\";\nimport cookieParser from \"cookie-parser\";\n\nimport { registerRoutes } from \"./routes\";\nimport { setupVite } from \"./vite\";\n\n// ==================================================\n// ⚙️ Express App Setup\n// ==================================================\nconst app = express();\napp.set(\"trust proxy\", 1);\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// ==================================================\n// 🌐 CORS + Cookies\n// ==================================================\napp.use(cors({ origin: true, credentials: true }));\napp.use(cookieParser());\n\n// ==================================================\n// 🧾 Request Logging Middleware\n// ==================================================\napp.use((req: Request, res: Response, next: NextFunction) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined;\n\n  const originalJson = res.json.bind(res);\n  res.json = (body: any): Response => {\n    capturedJsonResponse = body;\n    return originalJson(body);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      if (logLine.length > 100) logLine = logLine.slice(0, 99) + \"…\";\n      console.log(logLine);\n    }\n  });\n\n  next();\n});\n\n// ==================================================\n// 💾 Session Setup\n// ==================================================\nconst PgStore = connectPg(session);\n\napp.use(\n  session({\n    store: new PgStore({\n      conString: process.env.DATABASE_URL,\n      createTableIfMissing: false,\n      ttl: 7 * 24 * 60 * 60,\n      tableName: \"sessions\",\n    }),\n    secret: process.env.SESSION_SECRET!,\n    name: \"sessionId\",\n    resave: false,\n    saveUninitialized: false,\n    proxy: true,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      sameSite: \"lax\",\n      maxAge: 7 * 24 * 60 * 60 * 1000,\n      path: \"/\",\n    },\n  })\n);\n\n// ==================================================\n// 🧩 Register Routes & Error Handling\n// ==================================================\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    console.error(\"❌ Express Error:\", message);\n    res.status(status).json({ message });\n  });\n\n  console.log(\"🌱 Express environment:\", app.get(\"env\"));\n\n  // ==================================================\n  // ⚙️ Dev Mode: Vite Middleware\n  // ==================================================\n  if (app.get(\"env\") === \"development\") {\n    console.log(\"🚀 Starting Vite in middleware mode...\");\n    await setupVite(app, server);\n  } else {\n    console.log(\"📦 Production: serving static files\");\n    app.use(express.static(\"dist/public\"));\n    app.get(\"*\", (_req, res) => {\n      res.sendFile(\"index.html\", { root: \"dist/public\" });\n    });\n  }\n\n  // ==================================================\n  // 🖥️ Start Server\n  // ==================================================\n  const port = Number(process.env.PORT || 5000);\n  server.listen(port, \"0.0.0.0\", () => {\n    console.log(`✅ Server running on http://0.0.0.0:${port}`);\n  });\n})();\n","size_bytes":4241},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/AchievementsInline.tsx":{"content":"\"use client\";\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport type { UIStamp } from \"@/types\";\n\ninterface Airport {\n  id: number;\n  ident: string;\n  iata?: string;\n  iso_country?: string;\n  country?: string;\n}\n\ninterface AchievementsInlineProps {\n  allStamps: UIStamp[];\n  visitedAirportIds: Set<number>;\n  airports: Airport[];\n  showStamps: boolean;\n}\n\nexport default function AchievementsInline({\n  allStamps,\n  visitedAirportIds,\n  airports,\n  showStamps,\n}: AchievementsInlineProps) {\n  const [validStamps, setValidStamps] = useState<UIStamp[]>([]);\n\n  // Map country names to ISO codes\n  const countryToISO: Record<string, string> = {\n    Japan: \"jp\",\n    Brazil: \"br\",\n    \"United States\": \"us\",\n    France: \"fr\",\n    Germany: \"de\",\n    Italy: \"it\",\n    Switzerland: \"ch\",\n    Belgium: \"be\",\n    Netherlands: \"nl\",\n    Portugal: \"pt\",\n    Thailand: \"th\",\n    Malaysia: \"my\",\n    Singapore: \"sg\",\n    \"United Arab Emirates\": \"ae\",\n    \"Vatican City\": \"va\",\n    \"United Kingdom\": \"gb\",\n    India: \"in\",\n  };\n\n  // Compute earned ISO codes in lowercase\n  const earnedISOCodes = useMemo(() => {\n    const codes = new Set<string>();\n    airports.forEach((airport) => {\n      if (!visitedAirportIds.has(airport.id)) return;\n\n      const country = airport.country || airport.iso_country;\n      if (!country) return;\n\n      const iso = (countryToISO[country] || country).toLowerCase();\n      codes.add(iso);\n    });\n    return codes;\n  }, [visitedAirportIds, airports]);\n\n  // Validate images\n  useEffect(() => {\n    const loadImages = async () => {\n      const checked: UIStamp[] = [];\n      await Promise.all(\n        allStamps.map(\n          (stamp) =>\n            new Promise<void>((resolve) => {\n              const img = new Image();\n              img.src = stamp.imageUrl;\n              img.onload = () => {\n                checked.push(stamp);\n                resolve();\n              };\n              img.onerror = () => resolve();\n            })\n        )\n      );\n      setValidStamps(checked);\n    };\n    loadImages();\n  }, [allStamps]);\n\n  // Add achieved status\n  const stampsWithStatus = useMemo(\n    () =>\n      validStamps.map((stamp) => ({\n        ...stamp,\n        achieved: earnedISOCodes.has(stamp.isoCode.toLowerCase()),\n      })),\n    [validStamps, earnedISOCodes]\n  );\n\n  if (!showStamps || stampsWithStatus.length === 0) return null;\n\n  return (\n    <div className=\"grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4 mt-4 w-full place-items-center\">\n      {stampsWithStatus.map((stamp) => (\n        <div key={stamp.id} className=\"flex flex-col items-center\">\n          <img\n            src={stamp.imageUrl}\n            alt={stamp.name}\n            className={`object-contain transition-all duration-300 ${\n              stamp.achieved ? \"opacity-100 drop-shadow-md\" : \"opacity-30 grayscale\"\n            }`}\n            style={{ width: 80, height: 80 }}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2948},"client/src/components/examples/Header.tsx":{"content":"import { Header as HeaderComponent } from \"../Header\";\nimport { ThemeProvider } from \"../ThemeProvider\";\n\nexport default function HeaderExample() {\n  return (\n    <ThemeProvider>\n      <HeaderComponent />\n    </ThemeProvider>\n  );\n}\n","size_bytes":233},"client/src/components/SplashScreen.tsx":{"content":"\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { createLucideIcon, LucideProps } from \"lucide-react\";\nimport { faceAlien } from \"@lucide/lab\"; // ✅ correct import\n\n// 👽 Create a proper React component from the Lucide Lab icon definition\nconst FaceAlien = createLucideIcon(\"FaceAlien\", faceAlien) as React.FC<LucideProps>;\n\ninterface SplashScreenProps {\n  onComplete: () => void;\n}\n\nexport function SplashScreen({ onComplete }: SplashScreenProps) {\n  const [fadeOut, setFadeOut] = useState(false);\n\n  useEffect(() => {\n    const fadeTimer = setTimeout(() => setFadeOut(true), 1200);\n    const completeTimer = setTimeout(() => onComplete(), 1500);\n\n    return () => {\n      clearTimeout(fadeTimer);\n      clearTimeout(completeTimer);\n    };\n  }, [onComplete]);\n\n  return (\n    <div\n      className={`fixed inset-0 z-50 flex items-center justify-center \n        bg-black transition-opacity duration-500 ${\n          fadeOut ? \"opacity-0\" : \"opacity-100\"\n        }`}\n      data-testid=\"splash-screen\"\n    >\n      <FaceAlien className=\"h-24 w-24 text-green-500 animate-pulse drop-shadow-lg\" />\n    </div>\n  );\n}\n","size_bytes":1132},"public/generate-icons.js":{"content":"const fs = require('fs');\nconst { createCanvas } = require('canvas');\n\nfunction createIcon(size) {\n  const canvas = createCanvas(size, size);\n  const ctx = canvas.getContext('2d');\n  \n  const gradient = ctx.createLinearGradient(0, 0, size, size);\n  gradient.addColorStop(0, '#0ea5e9');\n  gradient.addColorStop(1, '#06b6d4');\n  \n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, size, size);\n  \n  ctx.fillStyle = '#ffffff';\n  ctx.font = `bold ${size * 0.3}px Arial`;\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('✈️', size / 2, size / 2);\n  \n  const buffer = canvas.toBuffer('image/png');\n  fs.writeFileSync(`icon-${size}.png`, buffer);\n  console.log(`Created icon-${size}.png`);\n}\n\ncreateIcon(192);\ncreateIcon(512);\n","size_bytes":748},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/examples/FlightCard.tsx":{"content":"import { FlightCard as FlightCardComponent } from \"../FlightCard\";\n\nexport default function FlightCardExample() {\n  return (\n    <div className=\"p-8\">\n      <FlightCardComponent\n        flightNumber=\"184\"\n        airline=\"IGO\"\n        from=\"DEL\"\n        to=\"AMD\"\n        date=\"2022-10-10\"\n        departureTime=\"09:50\"\n        arrivalTime=\"11:20\"\n        aircraftType=\"Airbus A321neo\"\n        status=\"completed\"\n      />\n    </div>\n  );\n}\n","size_bytes":439},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\n/* -------------------------------------------------------------------------- */\n/* 🔑 Token Management                                                        */\n/* -------------------------------------------------------------------------- */\n\nconst TOKEN_KEY = \"auth_token\";\n\nexport function getAuthToken(): string | null {\n  try {\n    return localStorage.getItem(TOKEN_KEY);\n  } catch {\n    return null;\n  }\n}\n\nexport function setAuthToken(token: string): void {\n  try {\n    localStorage.setItem(TOKEN_KEY, token);\n  } catch (err) {\n    console.error(\"❌ Failed to save auth token:\", err);\n  }\n}\n\nexport function clearAuthToken(): void {\n  try {\n    localStorage.removeItem(TOKEN_KEY);\n  } catch (err) {\n    console.error(\"❌ Failed to clear auth token:\", err);\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/* 🪪 Header Utility                                                          */\n/* -------------------------------------------------------------------------- */\n\nexport function getAuthHeaders(): Record<string, string> {\n  const token = getAuthToken();\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n  };\n  if (token) headers.Authorization = `Bearer ${token}`;\n  return headers;\n}\n\n/* -------------------------------------------------------------------------- */\n/* 🚨 Response Validator                                                      */\n/* -------------------------------------------------------------------------- */\n\nasync function throwIfResNotOk(res: Response): Promise<void> {\n  if (!res.ok) {\n    let message: string;\n    try {\n      const text = await res.text();\n      message = text || res.statusText;\n    } catch {\n      message = res.statusText;\n    }\n    console.error(`❌ API ${res.status}: ${message}`);\n    throw new Error(`${res.status}: ${message}`);\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/* 🌍 Universal API Request Helper                                            */\n/* -------------------------------------------------------------------------- */\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown,\n  token?: string\n): Promise<Response> {\n  const authToken = token || getAuthToken();\n\n  const headers: HeadersInit = {\n    \"Content-Type\": \"application/json\",\n  };\n  if (authToken) headers.Authorization = `Bearer ${authToken}`;\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\n/* -------------------------------------------------------------------------- */\n/* 🌐 API Base URL                                                            */\n/* -------------------------------------------------------------------------- */\n\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || \"\";\n\n/* -------------------------------------------------------------------------- */\n/* 🧭 Query Function for TanStack Query                                       */\n/* -------------------------------------------------------------------------- */\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\n\nexport const getQueryFn =\n  <T>({ on401 = \"throw\" }: { on401?: UnauthorizedBehavior }): QueryFunction<T> =>\n  async ({ queryKey }) => {\n    const endpoint = queryKey[0] as string;\n    const url = `${API_BASE_URL}${endpoint.startsWith(\"/\") ? endpoint : `/${endpoint}`}`;\n\n    const token = getAuthToken();\n\n    const headers: HeadersInit = {\n      \"Content-Type\": \"application/json\",\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\n    };\n\n    const res = await fetch(url, {\n      method: \"GET\",\n      headers,\n      credentials: \"include\",\n    });\n\n    // Gracefully handle missing token or unauthorized\n    if (res.status === 401) {\n      console.warn(\"⚠️ Unauthorized — returning null\");\n      if (on401 === \"returnNull\") return null as T;\n      throw new Error(\"401: Unauthorized\");\n    }\n\n    await throwIfResNotOk(res);\n    return res.json();\n  };\n\n/* -------------------------------------------------------------------------- */\n/* ⚙️ Default QueryClient Configuration                                       */\n/* -------------------------------------------------------------------------- */\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      // ✅ Default should not always call getQueryFn with /api/auth/user\n      // Leave queryFn undefined so each useQuery defines its own getQueryFn\n      refetchOnWindowFocus: false,\n      refetchInterval: false,\n      retry: false,\n      staleTime: Infinity,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":4837},"LOCAL_DEPLOYMENT.md":{"content":"# SinceOnEarth Flight Tracker - Local Deployment Guide\n\nThis guide will help you run and deploy the SinceOnEarth Flight Tracker application on your local machine or any hosting platform.\n\n## Prerequisites\n\n- **Node.js** (v20 or later)\n- **npm** (comes with Node.js)\n- **PostgreSQL database** (local or cloud-hosted like Neon, Supabase, Railway)\n\n## Quick Start (Local Development)\n\n### 1. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 2. Set Up Environment Variables\n\nCreate a `.env` file in the root directory:\n\n```env\n# Database Connection\nNEON_DATABASE_URL=postgresql://username:password@host:port/database?sslmode=require\n\n# Session Secret (generate a random string)\nSESSION_SECRET=your-random-secret-key-here\n\n# Optional: Aviationstack API (for flight lookup)\nAVIATIONSTACK_API_KEY=your-api-key-here\n```\n\n**Important Notes:**\n- Replace the `NEON_DATABASE_URL` with your actual PostgreSQL connection string\n- Generate a secure random string for `SESSION_SECRET` (you can use: `openssl rand -base64 32`)\n- The Aviationstack API key is optional but required for the flight lookup feature\n\n### 3. Set Up the Database\n\nThe app uses Drizzle ORM. To sync your database schema:\n\n```bash\nnpm run db:push\n```\n\nThis will create all necessary tables in your PostgreSQL database.\n\n### 4. Run the Development Server\n\n```bash\nnpm run dev\n```\n\nThe app will be available at `http://localhost:5000`\n\n## Building for Production\n\n### 1. Build the Application\n\n```bash\nnpm run build\n```\n\nThis creates:\n- Frontend build in `dist/client/`\n- Backend build in `dist/`\n\n### 2. Run Production Server\n\n```bash\nnpm start\n```\n\nThe production server will run on port 5000 (or the PORT environment variable).\n\n## Deployment Options\n\n### Option 1: VPS/Cloud Server (DigitalOcean, AWS, etc.)\n\n1. **Upload your code** to the server (via git, scp, etc.)\n2. **Install Node.js** on the server\n3. **Set environment variables** in production\n4. **Install dependencies**: `npm install --production`\n5. **Build the app**: `npm run build`\n6. **Use PM2 to run the app**:\n\n```bash\n# Install PM2 globally\nnpm install -g pm2\n\n# Start the app\npm2 start dist/index.js --name sinceonearth\n\n# Save PM2 process list\npm2 save\n\n# Set PM2 to start on boot\npm2 startup\n```\n\n7. **Set up Nginx as reverse proxy** (optional but recommended):\n\n```nginx\nserver {\n    listen 80;\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n### Option 2: Docker Deployment\n\nCreate a `Dockerfile`:\n\n```dockerfile\nFROM node:20-alpine\n\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm install --production\n\nCOPY . .\nRUN npm run build\n\nEXPOSE 5000\n\nCMD [\"npm\", \"start\"]\n```\n\nCreate a `docker-compose.yml`:\n\n```yaml\nversion: '3.8'\nservices:\n  app:\n    build: .\n    ports:\n      - \"5000:5000\"\n    environment:\n      - NEON_DATABASE_URL=${NEON_DATABASE_URL}\n      - SESSION_SECRET=${SESSION_SECRET}\n      - NODE_ENV=production\n    restart: unless-stopped\n```\n\nRun with:\n```bash\ndocker-compose up -d\n```\n\n### Option 3: Vercel/Netlify (Serverless)\n\nThis app uses Express and needs a Node.js server, so it's best suited for:\n- **Vercel** (supports serverless functions)\n- **Railway** (recommended - easy deployment)\n- **Render** (free tier available)\n\nFor Railway:\n1. Connect your GitHub repo\n2. Set environment variables in Railway dashboard\n3. Railway auto-detects and deploys Node.js apps\n\n### Option 4: Heroku\n\n```bash\n# Login to Heroku\nheroku login\n\n# Create app\nheroku create your-app-name\n\n# Set environment variables\nheroku config:set NEON_DATABASE_URL=\"your-database-url\"\nheroku config:set SESSION_SECRET=\"your-secret\"\n\n# Deploy\ngit push heroku main\n```\n\n## Database Setup Options\n\nYou need a PostgreSQL database. Here are some options:\n\n### Option 1: Neon (Serverless Postgres - Recommended)\n- Sign up at [neon.tech](https://neon.tech)\n- Create a project\n- Copy the connection string\n- Free tier: 0.5 GB storage, always available\n\n### Option 2: Supabase\n- Sign up at [supabase.com](https://supabase.com)\n- Create a project\n- Get connection string from Settings > Database\n- Free tier: 500 MB storage\n\n### Option 3: Railway\n- Sign up at [railway.app](https://railway.app)\n- Add PostgreSQL service\n- Get connection string from Variables tab\n\n### Option 4: Local PostgreSQL\n```bash\n# Install PostgreSQL\n# Ubuntu/Debian\nsudo apt install postgresql\n\n# macOS\nbrew install postgresql\n\n# Start PostgreSQL\nsudo service postgresql start\n\n# Create database\ncreatedb sinceonearth\n\n# Connection string format\npostgresql://username:password@localhost:5432/sinceonearth\n```\n\n## Environment Variables Reference\n\n| Variable | Required | Description |\n|----------|----------|-------------|\n| `NEON_DATABASE_URL` | Yes | PostgreSQL connection string |\n| `SESSION_SECRET` | Yes | Secret key for session encryption |\n| `AVIATIONSTACK_API_KEY` | No | API key for flight data lookup |\n| `NODE_ENV` | No | Set to 'production' for production |\n| `PORT` | No | Port to run server (default: 5000) |\n\n## Troubleshooting\n\n### Port Already in Use\n```bash\n# Find process using port 5000\nlsof -i :5000\n\n# Kill the process\nkill -9 <PID>\n```\n\n### Database Connection Issues\n- Check if your database URL is correct\n- Ensure your database server is running\n- Check if your IP is whitelisted (for cloud databases)\n- Verify SSL mode settings\n\n### Build Errors\n```bash\n# Clear node_modules and reinstall\nrm -rf node_modules package-lock.json\nnpm install\n```\n\n## Admin User Setup\n\nAfter deployment, you need to manually set a user as admin:\n\n1. Register a user through the app\n2. Connect to your database\n3. Run this SQL:\n\n```sql\nUPDATE users \nSET is_admin = true \nWHERE email = 'your-email@example.com';\n```\n\n## Support\n\nFor issues or questions about the app, refer to the codebase or create an issue in your repository.\n\n## License\n\nMIT\n","size_bytes":5991},"client/src/App.tsx":{"content":"\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Route, Switch, useLocation } from \"wouter\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { ToastProvider, ToastViewport } from \"@/components/ui/toast\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { Header } from \"@/components/Header\";\nimport { SplashScreen } from \"@/components/SplashScreen\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\n// Pages\nimport GetStarted from \"@/pages/GetStarted\";\nimport Register from \"@/pages/Register\";\nimport Login from \"@/pages/Login\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport TripsPageWrapper from \"@/pages/TripsPageWrapper\";\nimport StayInsPageWrapper from \"@/pages/StayInsPageWrapper\";\nimport Admin from \"@/pages/Admin\";\nimport NotFound from \"@/pages/not-found\";\n\n/* ===============================\n   🚏 ROUTER HANDLER\n   =============================== */\nfunction Router({ isAuthenticated }: { isAuthenticated: boolean }) {\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    if (isAuthenticated) {\n      navigate(\"/dashboard\");\n    }\n  }, [isAuthenticated, navigate]);\n\n  return (\n    <Switch>\n      {!isAuthenticated && (\n        <>\n          <Route path=\"/\" component={GetStarted} />\n          <Route path=\"/get-started\" component={GetStarted} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n        </>\n      )}\n      {isAuthenticated && (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/trips\" component={TripsPageWrapper} />\n          <Route path=\"/stayins\" component={StayInsPageWrapper} />\n          <Route path=\"/admin\" component={Admin} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\n/* ===============================\n   ⚙️ MAIN APP CONTENT\n   =============================== */\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [location] = useLocation();\n\n  // ⏳ While checking session\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen text-muted-foreground\">\n        Checking session...\n      </div>\n    );\n  }\n\n  // 🧭 Logged-out view\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex flex-col items-center justify-center bg-background\">\n        <Router isAuthenticated={false} />\n      </div>\n    );\n  }\n\n  // 🧑‍🚀 Authenticated view\n  return (\n    <div className=\"min-h-screen bg-background pb-24 md:pb-0\">\n      <main className=\"flex flex-col items-center w-full\">\n        <Router isAuthenticated={true} />\n      </main>\n    </div>\n  );\n}\n\n/* ===============================\n   🚀 ROOT APP COMPONENT\n   =============================== */\nexport default function App() {\n  const [showSplash, setShowSplash] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setShowSplash(false), 1500);\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <ToastProvider>\n            <AnimatePresence mode=\"wait\">\n              {showSplash ? (\n                <motion.div\n                  key=\"splash\"\n                  initial={{ opacity: 1 }}\n                  exit={{ opacity: 0 }}\n                  transition={{ duration: 0.6 }}\n                >\n                  <SplashScreen onComplete={() => setShowSplash(false)} />\n                </motion.div>\n              ) : (\n                <motion.div\n                  key=\"app\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{ duration: 0.6 }}\n                >\n                  <AppContent />\n                </motion.div>\n              )}\n            </AnimatePresence>\n            <ToastViewport />\n          </ToastProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":4242},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/examples/CSVImport.tsx":{"content":"import { CSVImport as CSVImportComponent } from \"../CSVImport\";\n\nexport default function CSVImportExample() {\n  return (\n    <div className=\"mx-auto max-w-2xl p-8\">\n      <CSVImportComponent />\n    </div>\n  );\n}\n","size_bytes":212},"android/app/src/test/java/com/getcapacitor/myapp/ExampleUnitTest.java":{"content":"package com.getcapacitor.myapp;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href=\"http://d.android.com/tools/testing\">Testing documentation</a>\n */\npublic class ExampleUnitTest {\n\n    @Test\n    public void addition_isCorrect() throws Exception {\n        assertEquals(4, 2 + 2);\n    }\n}\n","size_bytes":402},"server/storage.ts":{"content":"import { Pool } from \"pg\";\n\nexport const pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: { rejectUnauthorized: false },\n});\n\nexport interface UserInput {\n  username: string;\n  email: string;\n  passwordHash: string;\n  name: string;\n  country?: string | null;\n  alien?: string;\n}\n\nexport interface FlightInput {\n  userId: string;\n  airlineName: string;\n  flightNumber: string;\n  departure: string;\n  arrival: string;\n  departureLatitude?: number | null;\n  departureLongitude?: number | null;\n  arrivalLatitude?: number | null;\n  arrivalLongitude?: number | null;\n  date: string;\n  departureTime?: string | null;\n  arrivalTime?: string | null;\n  aircraftType?: string | null;\n  distance?: number;\n  duration?: string | null;\n  status?: string;\n\n  departure_terminal?: string | null;\n  arrival_terminal?: string | null;\n}\n\n\nexport const storage = {\n  /* ===============================\n     👤 Users\n     =============================== */\n  async getUserByUsernameOrEmail(identifier: string) {\n    const result = await pool.query(\n      `SELECT * FROM users WHERE username = $1 OR email = $1`,\n      [identifier]\n    );\n    return result.rows[0];\n  },\n\n  async getUser(id: string) {\n    const result = await pool.query(\n      `SELECT id, username, email, name, country, alien, is_admin AS \"isAdmin\", created_at AS \"createdAt\"\n       FROM users\n       WHERE id = $1`,\n      [id]\n    );\n    return result.rows[0];\n  },\n\n  async getAllUsers() {\n    const result = await pool.query(`SELECT * FROM users ORDER BY id ASC`);\n    return result.rows;\n  },\n\n  async createUser({ username, email, passwordHash, name, country }: UserInput) {\n    // Use a transaction to safely assign next alien\n    const client = await pool.connect();\n    try {\n      await client.query(\"BEGIN\");\n\n      // Get max current alien value\n      const res = await client.query(`SELECT MAX(alien) AS maxAlien FROM users`);\n      const maxAlien = res.rows[0]?.maxalien || \"00\";\n      let nextAlienNumber = parseInt(maxAlien, 10) + 1;\n\n      // Limit to 99\n      if (nextAlienNumber > 99) throw new Error(\"Maximum number of users reached\");\n\n      const alienStr = String(nextAlienNumber).padStart(2, \"0\");\n\n      const insertRes = await client.query(\n        `INSERT INTO users (username, email, password_hash, name, country, alien)\n         VALUES ($1, $2, $3, $4, $5, $6)\n         RETURNING *`,\n        [username, email, passwordHash, name, country || null, alienStr]\n      );\n\n      await client.query(\"COMMIT\");\n      return insertRes.rows[0];\n    } catch (err) {\n      await client.query(\"ROLLBACK\");\n      throw err;\n    } finally {\n      client.release();\n    }\n  },\n\n  /* ===============================\n     ✈️ Flights\n     =============================== */\n  async getUserFlights(userId: string) {\n    const result = await pool.query(\n      `SELECT *\n       FROM flights\n       WHERE user_id = $1\n       ORDER BY date DESC`,\n      [userId]\n    );\n    return result.rows;\n  },\n\nasync createFlight(flight: FlightInput) {\n  const result = await pool.query(\n    `INSERT INTO flights (\n       user_id, airline_name, flight_number, departure, arrival,\n       departure_latitude, departure_longitude, arrival_latitude, arrival_longitude,\n       date, departure_time, arrival_time, aircraft_type, distance, duration, status,\n       departure_terminal, arrival_terminal\n     )\n     VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18)\n     RETURNING *`,\n    [\n      flight.userId,\n      flight.airlineName,\n      flight.flightNumber,\n      flight.departure,\n      flight.arrival,\n      flight.departureLatitude ?? null,\n      flight.departureLongitude ?? null,\n      flight.arrivalLatitude ?? null,\n      flight.arrivalLongitude ?? null,\n      flight.date,\n      flight.departureTime ?? null,\n      flight.arrivalTime ?? null,\n      flight.aircraftType ?? null,\n      flight.distance ?? 0,\n      flight.duration ?? null,\n      flight.status ?? \"scheduled\",\n      flight.departure_terminal ?? null,\n      flight.arrival_terminal ?? null,\n    ]\n  );\n  return result.rows[0];\n}}\n","size_bytes":4088},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/examples/StatsDashboard.tsx":{"content":"import { StatsDashboard as StatsDashboardComponent } from \"../StatsDashboard\";\n\nconst mockStats = {\n  totalFlights: 42,\n  uniqueAirlines: 8,\n  uniqueAirports: 15,\n  totalDistance: \"52,340 km\",\n};\n\nexport default function StatsDashboardExample() {\n  return (\n    <div className=\"mx-auto max-w-7xl p-8\">\n      <StatsDashboardComponent stats={mockStats} />\n    </div>\n  );\n}\n","size_bytes":372},"server/jwt.ts":{"content":"import jwt, { JwtPayload } from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || process.env.SESSION_SECRET;\n\nif (!JWT_SECRET) {\n  throw new Error(\"❌ Missing JWT_SECRET or SESSION_SECRET in environment variables.\");\n}\n\nexport function createToken(payload: object): string {\n  return jwt.sign(payload, JWT_SECRET as jwt.Secret, { expiresIn: \"7d\" });\n}\n\nexport function verifyToken(token: string): JwtPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET as jwt.Secret) as JwtPayload;\n  } catch {\n    return null;\n  }\n}\n","size_bytes":544},"client/src/main.tsx":{"content":"import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","size_bytes":236},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  const message = error.message.toLowerCase();\n  return (\n    message.includes(\"401\") ||\n    message.includes(\"unauthorized\") ||\n    message.includes(\"no token provided\")\n  );\n}\n","size_bytes":239},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport {\n  getQueryFn,\n  clearAuthToken,\n  queryClient,\n  getAuthToken,\n} from \"@/lib/queryClient\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const [, navigate] = useLocation();\n\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: getQueryFn<User>({ on401: \"returnNull\" }),\n    retry: false,\n  });\n\n  const token = getAuthToken();\n\n  const logout = () => {\n    clearAuthToken();\n    queryClient.setQueryData([\"/api/auth/user\"], null);\n    navigate(\"/\");\n  };\n\n  return {\n    user,\n    token,\n    isLoading,\n    isAuthenticated: !!user,\n    logout,\n  };\n}\n","size_bytes":731},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport dotenv from \"dotenv\";\nimport { sql, eq, desc, and } from \"drizzle-orm\";\nimport crypto from \"crypto\";\n\nimport { db } from \"./db\";\nimport { storage } from \"./storage\";\nimport { flights, airports, stayins } from \"@shared/schema\";\nimport authRouter from \"./auth\";\nimport { verifyToken } from \"./jwt\";\n\ndotenv.config();\n\n/* =========================\n   Request with user type\n========================= */\nexport interface RequestWithUser extends Request {\n  user?: {\n    userId: string;\n    email: string;\n    username: string;\n    country?: string | null;\n    alien?: string | null;\n    isAdmin?: boolean;\n  };\n}\n\n/* =========================\n   Auth middleware\n========================= */\nexport function requireAuth(req: RequestWithUser, res: Response, next: NextFunction) {\n  const authHeader = req.headers.authorization;\n  if (!authHeader) return res.status(401).json({ message: \"Missing Authorization header\" });\n\n  const token = authHeader.split(\" \")[1];\n  if (!token) return res.status(401).json({ message: \"Missing token\" });\n\n  const decoded = verifyToken(token);\n  if (!decoded) return res.status(401).json({ message: \"Invalid or expired token\" });\n\n  req.user = {\n    userId: decoded.userId,\n    email: decoded.email,\n    username: decoded.username,\n    country: decoded.country ?? null,\n    alien: decoded.alien ?? null,\n    isAdmin: decoded.isAdmin ?? false,\n  };\n\n  next();\n}\n\nexport function requireAdmin(req: RequestWithUser, res: Response, next: NextFunction) {\n  if (!req.user?.isAdmin) return res.status(403).json({ message: \"Admins only\" });\n  next();\n}\n\n/* =========================\n   Register routes\n========================= */\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(\"/api/auth\", authRouter);\n\n  // --- Admin: list all users ---\n  app.get(\"/api/admin/users\", requireAuth, requireAdmin, async (_req, res) => {\n    try {\n      const usersList = await storage.getAllUsers();\n      return res.json(usersList.map(({ password_hash, ...u }) => ({ ...u, country: u.country ?? null })));\n    } catch (err) {\n      console.error(\"❌ Error fetching users:\", err);\n      return res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // --- List flights for logged-in user ---\n  app.get(\"/api/flights\", requireAuth, async (req: RequestWithUser, res) => {\n    try {\n      // First, update flight statuses for past flights (excluding today)\n      const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format\n      \n      await db\n        .update(flights)\n        .set({ status: \"Landed\" })\n        .where(\n          and(\n            eq(flights.user_id, req.user!.userId),\n            sql`LOWER(${flights.status}) = 'scheduled'`,\n            sql`${flights.date} < ${today}`\n          )\n        );\n      \n      // Fetch all flights\n      const flightsList = await db\n        .select()\n        .from(flights)\n        .where(eq(flights.user_id, req.user!.userId))\n        .orderBy(desc(flights.date));\n      return res.json(flightsList);\n    } catch (err) {\n      console.error(\"❌ Error fetching flights:\", err);\n      return res.status(500).json({ message: \"Failed to fetch flights\" });\n    }\n  });\n\n  // --- Add flight ---\n  app.post(\"/api/flights\", requireAuth, async (req: RequestWithUser, res) => {\n    try {\n      const body = req.body;\n      const userId = req.user!.userId;\n\n      if (!body.date || !body.flight_number || !body.departure || !body.arrival || !body.status) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const findAirport = async (code: string) => {\n        if (!code) return null;\n        const result = await db\n          .select()\n          .from(airports)\n          .where(eq(airports.iata, code))\n          .limit(1);\n        return result[0] ?? null;\n      };\n\n      const depAirport = await findAirport(body.departure);\n      const arrAirport = await findAirport(body.arrival);\n\n      const newFlight = {\n        id: crypto.randomUUID(),\n        user_id: userId,\n        date: body.date,\n        flight_number: body.flight_number,\n        departure: depAirport?.iata ?? depAirport?.ident ?? body.departure,\n        arrival: arrAirport?.iata ?? arrAirport?.ident ?? body.arrival,\n        departure_time: body.departure_time ?? null,\n        arrival_time: body.arrival_time ?? null,\n        aircraft_type: body.aircraft_type ?? null,\n        status: body.status,\n        created_at: new Date(),\n        airline_name: body.airline_name ?? null,\n        departure_terminal: body.departure_terminal ?? null,\n        arrival_terminal: body.arrival_terminal ?? null,\n        departure_latitude: body.departure_latitude ?? depAirport?.latitude ?? null,\n        departure_longitude: body.departure_longitude ?? depAirport?.longitude ?? null,\n        arrival_latitude: body.arrival_latitude ?? arrAirport?.latitude ?? null,\n        arrival_longitude: body.arrival_longitude ?? arrAirport?.longitude ?? null,\n        duration: body.duration ?? null,\n        distance: body.distance ? Number(body.distance) : null,\n        airline_code: body.airline_code ?? null,\n      };\n\n      await db.insert(flights).values(newFlight);\n      return res.status(201).json({ message: \"Flight added successfully\", flight: newFlight });\n    } catch (err) {\n      console.error(\"❌ Error adding flight:\", err);\n      return res.status(500).json({ message: \"Failed to add flight\" });\n    }\n  });\n\n  // --- Delete flight ---\n  app.delete(\"/api/flights/:id\", requireAuth, async (req: RequestWithUser, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await db\n        .delete(flights)\n        .where(and(eq(flights.id, id), eq(flights.user_id, req.user!.userId)));\n      if (!deleted) return res.status(404).json({ message: \"Flight not found\" });\n      return res.json({ message: \"Flight deleted successfully\" });\n    } catch (err) {\n      console.error(\"❌ Error deleting flight:\", err);\n      return res.status(500).json({ message: \"Failed to delete flight\" });\n    }\n  });\n\n  // --- List stay ins for logged-in user ---\n  app.get(\"/api/stayins\", requireAuth, async (req: RequestWithUser, res) => {\n    try {\n      const stayinsList = await db\n        .select()\n        .from(stayins)\n        .where(eq(stayins.user_id, req.user!.userId))\n        .orderBy(desc(stayins.check_in));\n      return res.json(stayinsList);\n    } catch (err) {\n      console.error(\"❌ Error fetching stay ins:\", err);\n      return res.status(500).json({ message: \"Failed to fetch stay ins\" });\n    }\n  });\n\n  // --- Add stay in ---\n  app.post(\"/api/stayins\", requireAuth, async (req: RequestWithUser, res) => {\n    try {\n      const body = req.body;\n      const userId = req.user!.userId;\n\n      if (!body.name || !body.city || !body.country || !body.check_in || !body.check_out || !body.type) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      const newStayIn = {\n        id: crypto.randomUUID(),\n        user_id: userId,\n        name: body.name,\n        city: body.city,\n        country: body.country,\n        check_in: body.check_in,\n        check_out: body.check_out,\n        maps_pin: body.maps_pin || null,\n        type: body.type,\n        created_at: new Date(),\n      };\n\n      await db.insert(stayins).values(newStayIn);\n      return res.status(201).json({ message: \"Stay in added successfully\", stayin: newStayIn });\n    } catch (err) {\n      console.error(\"❌ Error adding stay in:\", err);\n      return res.status(500).json({ message: \"Failed to add stay in\" });\n    }\n  });\n\n  // --- Search flights (local DB only) ---\n  app.get(\"/api/flights/search\", requireAuth, async (req: RequestWithUser, res) => {\n    try {\n      const { flight_number, airline_name, dep_iata, arr_iata, date } = req.query;\n\n      if (!date) return res.status(400).json({ message: \"Date is required\" });\n\n      const conditions = [eq(flights.user_id, req.user!.userId), eq(flights.date, date as string)];\n\n      if (flight_number) conditions.push(eq(flights.flight_number, flight_number as string));\n      if (airline_name) conditions.push(sql`${flights.airline_name} ILIKE ${'%' + (airline_name as string) + '%'}`);\n      if (dep_iata) conditions.push(eq(flights.departure, dep_iata as string));\n      if (arr_iata) conditions.push(eq(flights.arrival, arr_iata as string));\n\n      const flightsList = await db\n        .select()\n        .from(flights)\n        .where(and(...conditions))\n        .orderBy(desc(flights.date));\n\n      return res.json(flightsList);\n    } catch (err) {\n      console.error(\"❌ Error searching flights:\", err);\n      return res.status(500).json({ message: \"Failed to search flights\" });\n    }\n  });\n\n  return createServer(app);\n}\n","size_bytes":8848},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/index.css":{"content":"/* ============================\n   🧱 Tailwind Base Layers\n   ============================ */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* ============================\n   🎨 Base Font & Background Styling\n   ============================ */\n@layer base {\n  html, body {\n    @apply font-sans antialiased bg-black text-white h-full;\n  }\n\n  #root {\n    @apply min-h-screen bg-black text-white;\n  }\n\n  input, textarea, button {\n    @apply bg-black text-white;\n  }\n}\n","size_bytes":483},"client/src/components/StatsDashboard.tsx":{"content":"\"use client\";\n\nimport { useMemo, useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\nimport { Globe, Plane, Ruler, Building2, TowerControl, Award, Clock, MapPin } from \"lucide-react\";\nimport AchievementsInline from \"@/components/AchievementsInline\";\nimport type { Flight } from \"@shared/schema\";\n\n// Import airports.json\nimport airportsDataRaw from \"@/airports.json\";\n\ninterface AirportJSON {\n  iata: string;\n  icao: string;\n  name: string;\n  city: string;\n  country: string;\n  iso_country: string;\n  latitude: number;\n  longitude: number;\n  altitude?: number;\n  timezone?: string;\n  dst?: string;\n  tz?: string;\n}\n\n// Type expected by AchievementsInline\ninterface AchievementAirport {\n  id: number;\n  ident: string;\n  iata?: string;\n  iso_country?: string;\n  country?: string;\n}\n\nconst airportsData: AirportJSON[] = airportsDataRaw as AirportJSON[];\n\ninterface StatsDashboardProps {\n  totalFlights: number;\n  totalStayins: number;\n  flights: Flight[];\n  stayins: any[];\n}\n\ninterface Stamp {\n  id: string;\n  name: string;\n  isoCode: string;\n  imageUrl: string;\n}\n\n// Helper: get country from flight lat/lon via airports.json\nconst getCountryFromLatLon = (lat: number, lon: number) => {\n  const tolerance = 0.01; // ~1 km tolerance\n  const airport = airportsData.find(\n    (a) => Math.abs(a.latitude - lat) < tolerance && Math.abs(a.longitude - lon) < tolerance\n  );\n  return airport?.iso_country || null;\n};\n\nexport function StatsDashboard({ totalFlights, totalStayins, flights, stayins }: StatsDashboardProps) {\n  const [allStamps, setAllStamps] = useState<Stamp[]>([]);\n  const [showAchievements, setShowAchievements] = useState(false);\n\n  // Transform airportsData to AchievementAirport type for AchievementsInline\n  const airportsForAchievements: AchievementAirport[] = useMemo(\n    () =>\n      airportsData.map((a, idx) => ({\n        id: idx + 1,\n        ident: a.iata || a.icao || `AIRPORT_${idx + 1}`,\n        iata: a.iata,\n        iso_country: a.iso_country,\n        country: a.country,\n      })),\n    []\n  );\n\n  // Set stamps\n  useEffect(() => {\n    const isoCountries = [\"in\",\"ae\",\"us\",\"gb\",\"th\",\"sg\",\"de\",\"fr\",\"it\",\"ch\",\"br\",\"jp\",\"pt\",\"nl\",\"be\",\"my\",\"va\"];\n    setAllStamps(\n      isoCountries.map((code, i) => ({\n        id: `${i + 1}`,\n        name: code.toUpperCase(),\n        isoCode: code,\n        imageUrl: `/stamps/${code}.png`,\n      }))\n    );\n  }, []);\n\n  // Compute stats\n  const { uniqueCountries, uniquePlaces, totalDistance, totalHours, uniqueAirportCodes, visitedAirportIds } = useMemo(() => {\n    const countrySet = new Set<string>();\n    const placeSet = new Set<string>();\n    const airportSet = new Set<string>();\n    const visitedIds = new Set<number>();\n\n    let distanceSum = 0;\n    let hoursSum = 0;\n\n    for (const f of flights) {\n      // departure\n      if (f.departure_latitude && f.departure_longitude) {\n        const c = getCountryFromLatLon(f.departure_latitude, f.departure_longitude);\n        if (c) countrySet.add(c.toUpperCase());\n\n        // find airport ID for Achievements\n        const airport = airportsForAchievements.find(\n          (a) =>\n            (a.iata && a.iata.toUpperCase() === f.departure.toUpperCase()) ||\n            (a.ident && a.ident.toUpperCase() === f.departure.toUpperCase())\n        );\n        if (airport) visitedIds.add(airport.id);\n      }\n\n      // arrival\n      if (f.arrival_latitude && f.arrival_longitude) {\n        const c = getCountryFromLatLon(f.arrival_latitude, f.arrival_longitude);\n        if (c) countrySet.add(c.toUpperCase());\n\n        const airport = airportsForAchievements.find(\n          (a) =>\n            (a.iata && a.iata.toUpperCase() === f.arrival.toUpperCase()) ||\n            (a.ident && a.ident.toUpperCase() === f.arrival.toUpperCase())\n        );\n        if (airport) visitedIds.add(airport.id);\n      }\n\n      // airport codes\n      if (f.departure) airportSet.add(f.departure.toUpperCase());\n      if (f.arrival) airportSet.add(f.arrival.toUpperCase());\n\n      // distance & hours\n      if (f.departure_latitude && f.departure_longitude && f.arrival_latitude && f.arrival_longitude) {\n        // Use stored distance if available, otherwise calculate\n        let dist = 0;\n        if (f.distance && f.distance > 0) {\n          dist = f.distance;\n        } else {\n          // Haversine formula for great circle distance\n          const R = 6371; // Earth radius in km\n          const dLat = ((f.arrival_latitude - f.departure_latitude) * Math.PI) / 180;\n          const dLon = ((f.arrival_longitude - f.departure_longitude) * Math.PI) / 180;\n          const a =\n            Math.sin(dLat / 2) ** 2 +\n            Math.cos((f.departure_latitude * Math.PI) / 180) *\n            Math.cos((f.arrival_latitude * Math.PI) / 180) *\n            Math.sin(dLon / 2) ** 2;\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n          const greatCircleDist = R * c;\n          \n          // Apply 1.15x multiplier for actual flight path (air corridors, weather routing, etc.)\n          dist = greatCircleDist * 1.15;\n        }\n        \n        distanceSum += dist;\n        \n        // Calculate duration from stored value or estimate\n        if (f.duration) {\n          // Parse duration string (e.g., \"2h 30m\" or \"150\" minutes)\n          const durationStr = String(f.duration);\n          if (durationStr.includes('h') || durationStr.includes('m')) {\n            const hours = durationStr.match(/(\\d+)h/);\n            const mins = durationStr.match(/(\\d+)m/);\n            const totalHours = (hours ? parseInt(hours[1]) : 0) + (mins ? parseInt(mins[1]) / 60 : 0);\n            hoursSum += totalHours;\n          } else {\n            // Assume it's in minutes\n            hoursSum += parseFloat(durationStr) / 60;\n          }\n        } else {\n          // Estimate: actual flight time = distance / 850 km/h (cruise) + 30min for taxi/climb/descent\n          hoursSum += (dist / 850) + 0.5;\n        }\n      }\n    }\n\n    // Count unique places from stayins\n    for (const s of stayins) {\n      if (s.name) {\n        placeSet.add(s.name);\n      }\n    }\n\n    return {\n      uniqueCountries: countrySet,\n      uniquePlaces: placeSet,\n      totalDistance: distanceSum.toFixed(0),\n      totalHours: hoursSum.toFixed(1),\n      uniqueAirportCodes: airportSet,\n      visitedAirportIds: visitedIds,\n    };\n  }, [flights, stayins, airportsForAchievements]);\n\n  const formatNumber = (num: number | string) =>\n    isNaN(Number(num)) ? num : new Intl.NumberFormat(\"en-IN\").format(Number(num));\n\n  const labelClass = \"text-xs sm:text-sm opacity-80 font-medium leading-none\";\n\nconst StatCard = ({\n  icon: Icon,\n  value,\n  label,\n  color,\n}: {\n  icon: any;\n  value: string | number;\n  label: string;\n  color: string;\n}) => (\n  <div className=\"flex flex-col items-center justify-center gap-1 bg-gradient-to-br from-green-500/10 to-black/40 backdrop-blur-sm px-6 py-3 rounded-full text-white shadow-lg border-2 border-green-500/20 hover:border-green-400/40 transition-all duration-300 hover:shadow-green-500/20\">\n    <div className=\"flex items-center gap-3\">\n      <Icon className={`h-9 w-9 ${color}`} />\n      <div className=\"flex flex-col items-start\">\n        <span className=\"text-2xl sm:text-3xl font-bold\">{value}</span>\n        <span className={labelClass}>{label.charAt(0).toUpperCase() + label.slice(1).toLowerCase()}</span>\n      </div>\n    </div>\n  </div>\n);\n\n  return (\n    <div className=\"flex flex-col items-center w-full mb-6 gap-3 px-2 sm:px-4 select-none\">\n      <div className=\"flex flex-wrap justify-center gap-4 w-full max-w-4xl\">\n        <div className=\"flex flex-col items-center justify-center gap-1 bg-gradient-to-br from-green-500/10 to-black/40 backdrop-blur-sm px-6 py-3 rounded-full text-white shadow-lg border-2 border-green-500/20 hover:border-green-400/40 transition-all duration-300 hover:shadow-green-500/20\">\n          <div className=\"flex items-center gap-6\">\n            <div className=\"flex items-center gap-3\">\n              <Ruler className=\"h-9 w-9 text-yellow-400\" />\n              <div className=\"flex flex-col items-start\">\n                <span className=\"text-2xl sm:text-3xl font-bold\">{formatNumber(totalDistance)}</span>\n                <span className={labelClass}>Km's in Distance</span>\n              </div>\n            </div>\n            <div className=\"h-12 w-px bg-white/20\"></div>\n            <div className=\"flex items-center gap-3\">\n              <Clock className=\"h-9 w-9 text-orange-400\" />\n              <div className=\"flex flex-col items-start\">\n                <span className=\"text-2xl sm:text-3xl font-bold\">{formatNumber(totalHours)}</span>\n                <span className={labelClass}>Hours</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"flex flex-wrap justify-center gap-4 w-full max-w-5xl mt-1\">\n        <StatCard icon={Globe} value={uniqueCountries.size} label=\"Countries\" color=\"text-purple-400\" />\n        <StatCard icon={MapPin} value={uniquePlaces.size} label=\"Places\" color=\"text-pink-400\" />\n      </div>\n      <div className=\"flex flex-wrap justify-center gap-4 w-full max-w-5xl mt-1\">\n        <StatCard icon={Plane} value={formatNumber(totalFlights)} label=\"Flights\" color=\"text-green-400\" />\n        <StatCard icon={TowerControl} value={uniqueAirportCodes.size} label=\"Airports\" color=\"text-indigo-400\" />\n        <StatCard icon={Building2} value={formatNumber(totalStayins)} label=\"Stay Ins\" color=\"text-sky-400\" />\n      </div>\n      <div className=\"relative w-full max-w-4xl h-[8px] rounded-full overflow-hidden mt-5\">\n        <motion.div\n          initial={{ width: 0 }}\n          animate={{ width: \"100%\" }}\n          transition={{ duration: 1.3, ease: \"easeOut\" }}\n          className=\"absolute top-0 left-0 h-full w-full\"\n          style={{\n            background: \"linear-gradient(to right, #a855f7, #22c55e, #eab308, #6366f1, #38bdf8)\",\n          }}\n        />\n      </div>\n      <div className=\"flex justify-center mt-6 w-full max-w-4xl\">\n        <button\n          onClick={() => setShowAchievements((prev) => !prev)}\n          className=\"flex items-center justify-center gap-3 px-8 py-4 rounded-full bg-gradient-to-r from-green-500/20 to-green-600/20 hover:from-green-500/30 hover:to-green-600/30 border-2 border-green-400 shadow-lg shadow-green-500/30 transition-all duration-300 hover:scale-105\"\n        >\n          <Award className=\"w-7 h-7 text-green-400\" />\n          <span className=\"text-white font-semibold text-lg\">\n            {showAchievements ? \"Hide\" : \"View\"} Achievements\n          </span>\n        </button>\n      </div>\n      {showAchievements && (\n        <div className=\"mt-5 w-full max-w-4xl\">\n          <AchievementsInline\n            allStamps={allStamps}\n            visitedAirportIds={visitedAirportIds}\n            airports={airportsForAchievements}\n            showStamps={showAchievements}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":10936},"generate-icons.js":{"content":"// generate-icons.js\nimport sharp from \"sharp\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst input = path.join(\"client\", \"public\", \"face-alien.png\");\nconst outputDir = path.join(\"client\", \"public\", \"icons\");\n\nconst sizes = [192, 512, 180, 384, 72, 96, 144, 256]; // common PWA sizes\n\nif (!fs.existsSync(outputDir)) {\n  fs.mkdirSync(outputDir, { recursive: true });\n}\n\nsizes.forEach((size) => {\n  const outFile = path.join(outputDir, `face-alien-${size}x${size}.png`);\n  sharp(input)\n    .resize(size, size)\n    .toFile(outFile)\n    .then(() => console.log(`Generated ${outFile}`))\n    .catch((err) => console.error(err));\n});\n","size_bytes":634},"client/src/pages/StayIns.tsx":{"content":"\"use client\";\n\nimport React, { useState, useMemo } from \"react\";\nimport type { Stayin } from \"@shared/schema\";\nimport { Building2, MapPin, Calendar, ArrowLeft, Plus } from \"lucide-react\";\nimport AddStayInForm from \"@/components/AddStayInForm\";\n\ninterface StayInsProps {\n  stayins: Stayin[];\n  userId: string;\n  onRefresh?: () => void;\n}\n\nconst PAGE_SIZE = 12;\n\nexport default function StayIns({ stayins, userId, onRefresh }: StayInsProps) {\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [selectedYear, setSelectedYear] = useState<string>(\"All\");\n  const [visibleCount, setVisibleCount] = useState(PAGE_SIZE);\n\n  const handleStayInAdded = () => {\n    setShowAddForm(false);\n    if (onRefresh) onRefresh();\n  };\n\n  const safeParseDate = (dateStr?: string | null): Date | null => {\n    if (!dateStr) return null;\n    const d = new Date(dateStr);\n    return isNaN(d.getTime()) ? null : d;\n  };\n\n  // Get unique years from check-in dates\n  const years = useMemo(() => {\n    const yearSet = new Set<number>();\n    stayins.forEach((s) => {\n      const d = safeParseDate(s.check_in);\n      if (d) yearSet.add(d.getFullYear());\n    });\n    return [...yearSet].sort((a, b) => b - a);\n  }, [stayins]);\n\n  const tabs = [\"All\", ...years.map(String)];\n\n  // Filter by selected year\n  const filteredStayins = useMemo(() => {\n    if (selectedYear === \"All\") return stayins;\n    const year = Number(selectedYear);\n    return stayins.filter((s) => {\n      const d = safeParseDate(s.check_in);\n      return d !== null && d.getFullYear() === year;\n    });\n  }, [stayins, selectedYear]);\n\n  const handleLoadMore = () => setVisibleCount((c) => c + PAGE_SIZE);\n\n  // Calculate nights stayed\n  const calculateNights = (checkIn: string, checkOut: string): number => {\n    const d1 = safeParseDate(checkIn);\n    const d2 = safeParseDate(checkOut);\n    if (!d1 || !d2) return 0;\n    const diffTime = Math.abs(d2.getTime() - d1.getTime());\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  };\n\n  const StayCard = ({ stayin }: { stayin: Stayin }) => {\n    const checkInDate = safeParseDate(stayin.check_in);\n    const checkOutDate = safeParseDate(stayin.check_out);\n    const nights = calculateNights(stayin.check_in, stayin.check_out);\n\n    const typeColors: Record<string, string> = {\n      HOTEL: \"bg-blue-500/20 text-blue-400 border-blue-500/40\",\n      AIRBNB: \"bg-pink-500/20 text-pink-400 border-pink-500/40\",\n      HOSTEL: \"bg-green-500/20 text-green-400 border-green-500/40\",\n      MOTEL: \"bg-purple-500/20 text-purple-400 border-purple-500/40\",\n    };\n\n    const typeClass = typeColors[stayin.type] || typeColors.HOTEL;\n\n    return (\n      <div className=\"p-4 bg-neutral-900 border border-gray-700 rounded-xl hover:shadow-lg transition-shadow\">\n        <div className=\"flex flex-col gap-2\">\n          {/* Name and Type */}\n          <div className=\"flex items-start justify-between gap-2\">\n            <div className=\"font-semibold text-lg text-white flex-1\">{stayin.name}</div>\n            <span className={`px-2 py-1 rounded-full text-xs border ${typeClass}`}>\n              {stayin.type}\n            </span>\n          </div>\n\n          {/* Location */}\n          <div className=\"flex items-center gap-2 text-sm text-gray-300\">\n            <MapPin size={14} className=\"text-gray-400\" />\n            <span>\n              {stayin.city && `${stayin.city}, `}\n              {stayin.country}\n            </span>\n          </div>\n\n          {/* Dates */}\n          <div className=\"flex items-center gap-2 text-xs text-gray-400 mt-1\">\n            <Calendar size={12} />\n            <span>\n              {checkInDate?.toLocaleDateString()} → {checkOutDate?.toLocaleDateString()}\n            </span>\n            {nights > 0 && <span className=\"text-green-400\">({nights} night{nights !== 1 ? \"s\" : \"\"})</span>}\n          </div>\n\n          {/* Maps Pin */}\n          {stayin.maps_pin && (\n            <a\n              href={stayin.maps_pin}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-xs text-blue-400 hover:text-blue-300 hover:underline mt-1\"\n            >\n              View on Maps →\n            </a>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Show full-page Add Stay In form\n  if (showAddForm) {\n    return (\n      <div className=\"min-h-screen w-full bg-black text-white flex flex-col relative px-4 md:px-8 py-6\">\n        <button\n          onClick={() => setShowAddForm(false)}\n          className=\"flex items-center gap-2 text-white hover:text-sky-400 transition-colors mb-6\"\n        >\n          <ArrowLeft size={20} />\n          <span className=\"font-semibold\">Back to Stay Ins</span>\n        </button>\n        <AddStayInForm userId={userId} onSuccess={handleStayInAdded} alwaysOpen={true} />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen w-full bg-black text-white flex flex-col relative px-4 md:px-8\">\n      {/* Add Stay In Button */}\n      <div className=\"mb-6\">\n        <button\n          onClick={() => setShowAddForm(true)}\n          className=\"px-6 py-2 bg-sky-500 hover:bg-sky-600 text-black font-semibold rounded-full transition-all flex items-center gap-2\"\n        >\n          <Plus size={20} />\n          Add Stay In\n        </button>\n      </div>\n\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"text-sky-400 text-2xl font-semibold mb-3\">\n          Stay Ins\n        </div>\n\n        {/* Year Tabs - scrollable like TripHistory */}\n        {tabs.length > 0 && (\n          <div className=\"w-full overflow-x-auto scrollbar-hide relative bg-black my-0\">\n            <div className=\"flex gap-1 py-2 min-w-[max-content] pl-1 pr-4\">\n              {tabs.map((tab) => (\n                <button\n                  key={tab}\n                  onClick={() => {\n                    setSelectedYear(tab);\n                    setVisibleCount(PAGE_SIZE);\n                  }}\n                  className={`px-5 py-2 transition-all whitespace-nowrap focus:outline-none ${\n                    tab === selectedYear\n                      ? \"bg-sky-500 text-black font-semibold rounded-full\"\n                      : \"text-sky-400 hover:text-sky-300 bg-transparent\"\n                  }`}\n                >\n                  {tab}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Stay Ins Grid */}\n      {filteredStayins.length === 0 ? (\n        <div className=\"text-gray-400 text-center py-8\">No stay ins found</div>\n      ) : (\n        <>\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n            {filteredStayins.slice(0, visibleCount).map((stayin) => (\n              <StayCard key={stayin.id} stayin={stayin} />\n            ))}\n          </div>\n\n          {/* Load More */}\n          {visibleCount < filteredStayins.length && (\n            <div className=\"flex justify-center mb-6\">\n              <button\n                onClick={handleLoadMore}\n                className=\"px-6 py-2 rounded-full bg-sky-500 hover:bg-sky-600 text-black font-semibold\"\n              >\n                Load More\n              </button>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","size_bytes":7212},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/lib/countries.ts":{"content":"export const countries = [\n  \"United States\",\n  \"United Kingdom\",\n  \"Canada\",\n  \"Australia\",\n  \"Germany\",\n  \"France\",\n  \"Italy\",\n  \"Spain\",\n  \"Netherlands\",\n  \"Belgium\",\n  \"Switzerland\",\n  \"Austria\",\n  \"Sweden\",\n  \"Norway\",\n  \"Denmark\",\n  \"Finland\",\n  \"Poland\",\n  \"Czech Republic\",\n  \"Portugal\",\n  \"Greece\",\n  \"Ireland\",\n  \"New Zealand\",\n  \"Singapore\",\n  \"Japan\",\n  \"South Korea\",\n  \"China\",\n  \"India\",\n  \"United Arab Emirates\",\n  \"Saudi Arabia\",\n  \"Qatar\",\n  \"Thailand\",\n  \"Malaysia\",\n  \"Indonesia\",\n  \"Philippines\",\n  \"Vietnam\",\n  \"Brazil\",\n  \"Mexico\",\n  \"Argentina\",\n  \"Chile\",\n  \"Colombia\",\n  \"Peru\",\n  \"South Africa\",\n  \"Egypt\",\n  \"Israel\",\n  \"Turkey\",\n  \"Russia\",\n  \"Ukraine\",\n  \"Romania\",\n  \"Hungary\",\n  \"Croatia\",\n  \"Iceland\",\n  \"Luxembourg\",\n  \"Malta\",\n  \"Cyprus\",\n  \"Other\",\n];\n","size_bytes":788},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"server/vite.ts":{"content":"import express from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\n// ✅ define __dirname manually for ESM\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst viteLogger = createLogger();\n\nexport async function setupVite(app: express.Express, server: Server) {\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    server: { middlewareMode: true, hmr: { server } },\n    appType: \"custom\",\n    customLogger: viteLogger,\n  });\n\n  app.use(vite.middlewares);\n\n  app.use(\"*\", async (req, res, next) => {\n    try {\n      const url = req.originalUrl;\n      const templatePath = path.resolve(__dirname, \"../client/index.html\");\n\n      let template = await fs.promises.readFile(templatePath, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`\n      );\n\n      const html = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(html);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: express.Express) {\n  const distPath = path.resolve(__dirname, \"../dist/public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `⚠️ Build folder not found: ${distPath}. Run \\`npm run build\\` first.`\n    );\n  }\n\n  app.use(express.static(distPath));\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.join(distPath, \"index.html\"));\n  });\n}\n","size_bytes":1742},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/lib/countryCoordinates.ts":{"content":"export const countryCoordinates: Record<string, { lat: number; lon: number }> = {\n  \"United States\": { lat: 37.0902, lon: -95.7129 },\n  \"United Kingdom\": { lat: 55.3781, lon: -3.4360 },\n  \"Canada\": { lat: 56.1304, lon: -106.3468 },\n  \"Australia\": { lat: -25.2744, lon: 133.7751 },\n  \"Germany\": { lat: 51.1657, lon: 10.4515 },\n  \"France\": { lat: 46.2276, lon: 2.2137 },\n  \"Italy\": { lat: 41.8719, lon: 12.5674 },\n  \"Spain\": { lat: 40.4637, lon: -3.7492 },\n  \"Netherlands\": { lat: 52.1326, lon: 5.2913 },\n  \"Belgium\": { lat: 50.5039, lon: 4.4699 },\n  \"Switzerland\": { lat: 46.8182, lon: 8.2275 },\n  \"Austria\": { lat: 47.5162, lon: 14.5501 },\n  \"Sweden\": { lat: 60.1282, lon: 18.6435 },\n  \"Norway\": { lat: 60.4720, lon: 8.4689 },\n  \"Denmark\": { lat: 56.2639, lon: 9.5018 },\n  \"Finland\": { lat: 61.9241, lon: 25.7482 },\n  \"Poland\": { lat: 51.9194, lon: 19.1451 },\n  \"Czech Republic\": { lat: 49.8175, lon: 15.4730 },\n  \"Portugal\": { lat: 39.3999, lon: -8.2245 },\n  \"Greece\": { lat: 39.0742, lon: 21.8243 },\n  \"Ireland\": { lat: 53.4129, lon: -8.2439 },\n  \"New Zealand\": { lat: -40.9006, lon: 174.8860 },\n  \"Singapore\": { lat: 1.3521, lon: 103.8198 },\n  \"Japan\": { lat: 36.2048, lon: 138.2529 },\n  \"South Korea\": { lat: 35.9078, lon: 127.7669 },\n  \"China\": { lat: 35.8617, lon: 104.1954 },\n  \"India\": { lat: 20.5937, lon: 78.9629 },\n  \"United Arab Emirates\": { lat: 23.4241, lon: 53.8478 },\n  \"Saudi Arabia\": { lat: 23.8859, lon: 45.0792 },\n  \"Qatar\": { lat: 25.3548, lon: 51.1839 },\n  \"Thailand\": { lat: 15.8700, lon: 100.9925 },\n  \"Malaysia\": { lat: 4.2105, lon: 101.9758 },\n  \"Indonesia\": { lat: -0.7893, lon: 113.9213 },\n  \"Philippines\": { lat: 12.8797, lon: 121.7740 },\n  \"Vietnam\": { lat: 14.0583, lon: 108.2772 },\n  \"Brazil\": { lat: -14.2350, lon: -51.9253 },\n  \"Mexico\": { lat: 23.6345, lon: -102.5528 },\n  \"Argentina\": { lat: -38.4161, lon: -63.6167 },\n  \"Chile\": { lat: -35.6751, lon: -71.5430 },\n  \"Colombia\": { lat: 4.5709, lon: -74.2973 },\n  \"Peru\": { lat: -9.1900, lon: -75.0152 },\n  \"South Africa\": { lat: -30.5595, lon: 22.9375 },\n  \"Egypt\": { lat: 26.8206, lon: 30.8025 },\n  \"Israel\": { lat: 31.0461, lon: 34.8516 },\n  \"Turkey\": { lat: 38.9637, lon: 35.2433 },\n  \"Russia\": { lat: 61.5240, lon: 105.3188 },\n  \"Ukraine\": { lat: 48.3794, lon: 31.1656 },\n  \"Romania\": { lat: 45.9432, lon: 24.9668 },\n  \"Hungary\": { lat: 47.1625, lon: 19.5033 },\n  \"Croatia\": { lat: 45.1, lon: 15.2 },\n  \"Iceland\": { lat: 64.9631, lon: -19.0208 },\n  \"Luxembourg\": { lat: 49.8153, lon: 6.1296 },\n  \"Malta\": { lat: 35.9375, lon: 14.3754 },\n  \"Cyprus\": { lat: 35.1264, lon: 33.4299 },\n  \"Other\": { lat: 0, lon: 0 },\n};\n","size_bytes":2604},"client/src/pages/Login.tsx":{"content":"\"use client\";\n\nimport { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { motion } from \"framer-motion\";\nimport { Loader2, Eye, EyeOff, createLucideIcon } from \"lucide-react\";\nimport { faceAlien } from \"@lucide/lab\";\nimport { z } from \"zod\";\n\nimport { loginUserSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, setAuthToken } from \"@/lib/queryClient\";\n\nconst FaceAlien = createLucideIcon(\"FaceAlien\", faceAlien);\ntype LoginUser = z.infer<typeof loginUserSchema>;\n\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || \"\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [error, setError] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n\n  const form = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: { email: \"\", password: \"\" },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginUser) => {\n      const res = await fetch(`${API_BASE_URL}/api/auth/login`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(data),\n      });\n      if (!res.ok) {\n        const result = await res.json().catch(() => ({}));\n        throw new Error(result.message || \"Login failed\");\n      }\n      return res.json();\n    },\n    onSuccess: async (data) => {\n      if (data.token) setAuthToken(data.token);\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Welcome back 👽\",\n        description: \"Successfully signed in to SinceOnEarth!\",\n      });\n      setTimeout(() => setLocation(\"/\"), 800);\n    },\n    onError: (err: any) => {\n      const msg = err?.message || \"Invalid email or password\";\n      setError(msg);\n      toast({\n        title: \"Login failed 🚫\",\n        description: msg,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <motion.div\n  className=\"min-h-screen flex flex-col items-center justify-center p-4 bg-black text-white font-sans\"\n  initial={{ opacity: 0, y: 15 }}\n  animate={{ opacity: 1, y: 0 }}\n  exit={{ opacity: 0, y: -10 }}\n  transition={{ duration: 0.6, ease: \"easeInOut\" }}\n>\n\n      <div className=\"w-[320px] max-w-md space-y-6\">\n        {/* Alien Logo */}\n        <div className=\"flex flex-col items-center mb-6 space-y-4\">\n          <FaceAlien className=\"h-24 w-24 text-green-600 animate-pulse\" />\n        </div>\n\n        {/* Headings */}\n        <div className=\"text-center mb-8 space-y-2\">\n          <h1 className=\"text-2xl font-semibold text-white\">\n            welcome to ...sinceonearth\n          </h1>\n          <p className=\"text-xs text-white\">\n            Log in to explore your journeys across the world 🌍\n          </p>\n        </div>\n\n        {/* Login Form */}\n        <form\n          onSubmit={form.handleSubmit((data) =>\n            loginMutation.mutate({\n              email: data.email.trim().toLowerCase(),\n              password: data.password,\n            })\n          )}\n          className=\"space-y-4\"\n        >\n          {/* Email */}\n          <Input\n            id=\"email\"\n            type=\"email\"\n            placeholder=\"Email\"\n            autoCapitalize=\"none\"\n            autoCorrect=\"off\"\n            className=\"w-full h-14 bg-black text-white border border-white focus:border-green-500 focus:ring focus:ring-green-600\"\n            {...form.register(\"email\")}\n          />\n          {form.formState.errors.email && (\n            <p className=\"text-sm text-destructive mt-1\">\n              {form.formState.errors.email.message}\n            </p>\n          )}\n\n          {/* Password */}\n          <div className=\"relative\">\n            <Input\n              id=\"password\"\n              type={showPassword ? \"text\" : \"password\"}\n              placeholder=\"Password\"\n              autoCapitalize=\"none\"\n              autoCorrect=\"off\"\n              className=\"w-full h-14 bg-black text-white border border-white focus:border-green-500 focus:ring focus:ring-green-600 pr-10\"\n              {...form.register(\"password\")}\n            />\n            <button\n              type=\"button\"\n              onClick={() => setShowPassword(!showPassword)}\n              className=\"absolute right-3 top-1/2 -translate-y-1/2 text-white hover:text-green-500\"\n              aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n            >\n              {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n            </button>\n            {form.formState.errors.password && (\n              <p className=\"text-sm text-destructive mt-1\">\n                {form.formState.errors.password.message}\n              </p>\n            )}\n          </div>\n\n          {error && (\n            <p className=\"text-sm text-destructive text-center\">{error}</p>\n          )}\n\n          {/* Submit Button */}\n          <Button\n            type=\"submit\"\n            className=\"w-full h-14 bg-green-100 text-black border-2 border-green-500 hover:bg-green-200 rounded-full\"\n            disabled={loginMutation.isPending}\n          >\n            {loginMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Logging in...\n              </>\n            ) : (\n              \"Log in\"\n            )}\n          </Button>\n        </form>\n\n        {/* Footer */}\n        <div className=\"text-center text-sm space-y-4\">\n          <div>\n            <span className=\"text-white\">Don’t have an account? </span>\n            <Link href=\"/register\">\n              <span className=\"text-green-600 hover:underline cursor-pointer\">Sign up</span>\n            </Link>\n          </div>\n\n          <span className=\"inline-block px-4 py-2 rounded-full border border-green-600 text-green-600 font-semibold text-xs\">\n            Created by व्रज पटेल\n          </span>\n        </div>\n      </div>\n    </motion.div>\n  );\n}\n","size_bytes":6246},"client/src/components/CSVImport.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Upload, FileText, CheckCircle2, Loader2 } from \"lucide-react\";\nimport Papa from \"papaparse\";\nimport { cn } from \"@/lib/utils\";\n\nexport function CSVImport() {\n  const { toast } = useToast();\n  const [isDragging, setIsDragging] = useState(false);\n  const [fileName, setFileName] = useState<string | null>(null);\n  const [flightCount, setFlightCount] = useState<number>(0);\n  const [isImporting, setIsImporting] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleFile = (file: File) => {\n    if (!file.name.endsWith(\".csv\")) {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please upload a valid CSV file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsImporting(true);\n    setFileName(file.name);\n\n    Papa.parse(file, {\n      header: true,\n      complete: (results) => {\n        setFlightCount(results.data.length);\n        setIsImporting(false);\n        toast({\n          title: \"CSV Imported Successfully\",\n          description: `${results.data.length} flights have been imported.`,\n        });\n      },\n      error: (error) => {\n        console.error(\"CSV parse error:\", error);\n        setIsImporting(false);\n        toast({\n          title: \"Import Failed\",\n          description: \"There was an error parsing the CSV file.\",\n          variant: \"destructive\",\n        });\n      },\n    });\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    const file = e.dataTransfer.files[0];\n    if (file) handleFile(file);\n  };\n\n  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) handleFile(file);\n  };\n\n  return (\n    <Card\n      className={cn(\n        \"relative p-8 rounded-2xl border border-green-500/20\",\n        \"bg-black/50 backdrop-blur-lg shadow-[0_0_25px_rgba(0,255,140,0.08)]\",\n        \"transition-all duration-500 hover:shadow-[0_0_30px_rgba(0,255,120,0.2)]\"\n      )}\n    >\n      {/* Header */}\n      <div className=\"mb-6 flex items-center gap-3\">\n        <div className=\"flex h-12 w-12 items-center justify-center rounded-xl bg-green-500/10 border border-green-500/30\">\n          <FileText className=\"h-6 w-6 text-green-400\" />\n        </div>\n        <div>\n          <h2 className=\"text-xl md:text-2xl font-bold text-green-300\">Import Flight History</h2>\n          <p className=\"text-sm text-gray-400\">Upload your Flighty CSV export</p>\n        </div>\n      </div>\n\n      {/* Drop Zone */}\n      <div\n        onDragOver={(e) => {\n          e.preventDefault();\n          setIsDragging(true);\n        }}\n        onDragLeave={() => setIsDragging(false)}\n        onDrop={handleDrop}\n        onClick={() => fileInputRef.current?.click()}\n        className={cn(\n          \"relative flex flex-col items-center justify-center text-center rounded-2xl border-2 border-dashed p-10 transition-all cursor-pointer\",\n          isDragging\n            ? \"border-green-400 bg-green-500/10 shadow-[0_0_20px_rgba(0,255,120,0.3)]\"\n            : \"border-green-900/50 bg-black/30 hover:border-green-400/70 hover:bg-green-500/5\"\n        )}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          accept=\".csv\"\n          onChange={handleFileInput}\n          className=\"hidden\"\n        />\n\n        <div className=\"flex flex-col items-center gap-4\">\n          <div className=\"flex h-16 w-16 items-center justify-center rounded-full bg-green-500/10 border border-green-500/30\">\n            {isImporting ? (\n              <Loader2 className=\"h-8 w-8 text-green-400 animate-spin\" />\n            ) : (\n              <Upload className=\"h-8 w-8 text-green-400\" />\n            )}\n          </div>\n\n          <div>\n            <p className=\"text-lg font-medium text-green-200\">\n              Drop your CSV file here\n            </p>\n            <p className=\"mt-1 text-sm text-gray-500\">or click to browse</p>\n          </div>\n\n          <Button\n            type=\"button\"\n            disabled={isImporting}\n            className={cn(\n              \"mt-2 px-5 py-2 rounded-lg border border-green-500/30 text-green-300 font-semibold\",\n              \"bg-black/40 shadow-[0_0_10px_rgba(0,255,140,0.15)]\",\n              \"hover:bg-green-500/20 hover:text-green-200 hover:shadow-[0_0_15px_rgba(0,255,120,0.3)]\",\n              \"transition-all duration-300 active:scale-[0.98]\"\n            )}\n          >\n            <Upload className=\"h-4 w-4 mr-2\" />\n            {isImporting ? \"Importing...\" : \"Browse CSV\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* File Info */}\n      {fileName && (\n        <div className=\"mt-6 flex items-center justify-between rounded-xl border border-green-900/40 bg-green-500/5 px-5 py-3\">\n          <div>\n            <p className=\"text-sm text-green-300 font-medium\">{fileName}</p>\n            <p className=\"text-xs text-gray-500\">{flightCount} flights imported</p>\n          </div>\n          <CheckCircle2 className=\"h-6 w-6 text-green-400\" />\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":5224},"client/src/pages/StayInsPageWrapper.tsx":{"content":"\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Header } from \"@/components/Header\";\nimport StayIns from \"@/pages/StayIns\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function StayInsPageWrapper() {\n  const { token, user } = useAuth();\n\n  const { data: stayins = [], refetch } = useQuery<any[]>({\n    queryKey: [\"user-stayins\", token],\n    enabled: !!token,\n    queryFn: async () => {\n      if (!token) return [];\n      const res = await apiRequest(\"GET\", \"/api/stayins\", null, token);\n      if (!res.ok) throw new Error(\"Failed to fetch stay ins\");\n      return res.json();\n    },\n  });\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen w-screen bg-black text-white flex flex-col\">\n      <Header />\n      <div className=\"flex-1 overflow-y-auto pt-20 px-4\">\n        <StayIns stayins={stayins} userId={user.id} onRefresh={refetch} />\n      </div>\n    </div>\n  );\n}\n","size_bytes":976},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nexport default defineConfig({\n  root: path.resolve(__dirname, \"client\"),\n  publicDir: path.resolve(__dirname, \"client/public\"), // (optional, for clarity)\n  plugins: [react()],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client/src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n      \"@assets\": path.resolve(__dirname, \"attached_assets\"),\n    },\n  },\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5173,\n    proxy: {\n      \"/api\": \"http://localhost:5000\",\n    },\n  },\n  logLevel: \"info\",\n});\n","size_bytes":813},"drizzle.config.ts":{"content":"export default {\n  schema: \"./shared/schema.ts\",\n  out: \"./drizzle\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL!,\n  },\n};\n","size_bytes":157},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"README.md":{"content":"# seo-git\n# seo\n# soe\n","size_bytes":22},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base text-foreground ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":860},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/examples/AddFlightForm.tsx":{"content":"import { AddFlightForm as AddFlightFormComponent } from \"../AddFlightForm\";\n\nexport default function AddFlightFormExample() {\n  return (\n    <div className=\"mx-auto max-w-2xl p-8\">\n      <AddFlightFormComponent />\n    </div>\n  );\n}\n","size_bytes":232},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"capacitor.config.ts":{"content":"import { CapacitorConfig } from '@capacitor/cli';\n\nconst config: CapacitorConfig = {\n  appId: 'com.sinceonearth.app',\n  appName: 'Since On Earth',\n  webDir: 'dist',\n  server: { cleartext: false },\n};\n\nexport default config;\n","size_bytes":224},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/examples/StatCard.tsx":{"content":"import { StatCard as StatCardComponent } from \"../StatCard\";\nimport { Plane } from \"lucide-react\";\n\nexport default function StatCardExample() {\n  return (\n    <div className=\"p-8\">\n      <StatCardComponent\n        title=\"Total Flights\"\n        value={42}\n        icon={Plane}\n        subtitle=\"All time\"\n      />\n    </div>\n  );\n}\n","size_bytes":331},"client/src/lib/api.ts":{"content":"// client/src/lib/api.ts\n\n// 🌐 Automatically handle localhost or network IP\nconst API_BASE_URL =\n  import.meta.env.VITE_API_BASE_URL || \"\";\n\n/**\n * Reusable API request helper\n * Automatically adds Authorization header if token is provided\n * Handles JSON safely\n */\nexport async function apiRequest<T = any>(\n  method: string,\n  endpoint: string,\n  body?: any,\n  token?: string\n): Promise<T> {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  const headers: Record<string, string> = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  // ✅ Add Bearer token if available\n  if (token) headers[\"Authorization\"] = `Bearer ${token}`;\n\n  const options: RequestInit = {\n    method,\n    headers,\n    credentials: \"include\", // keep for cookie/session support\n    ...(body ? { body: JSON.stringify(body) } : {}),\n  };\n\n  const res = await fetch(url, options);\n\n  // 🔥 Handle failed responses more cleanly\n  if (!res.ok) {\n    let message = `Request failed: ${res.status}`;\n\n    try {\n      const errJson = await res.json();\n      if (errJson?.message) message = errJson.message;\n    } catch {\n      const errText = await res.text();\n      if (errText) message = errText;\n    }\n\n    throw new Error(message);\n  }\n\n  try {\n    return await res.json();\n  } catch {\n    return {} as T;\n  }\n}\n","size_bytes":1284},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  uuid,\n  varchar,\n  text,\n  jsonb,\n  boolean,\n  timestamp,\n  doublePrecision,\n  integer,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n/* =======================================================\n   🧠 Sessions Table\n   ======================================================= */\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)]\n);\n\n/* =======================================================\n   👽 Users Table\n   ======================================================= */\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  alien: varchar(\"alien\").unique().notNull(),\n  username: varchar(\"username\").unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password_hash: varchar(\"password_hash\"),\n  name: varchar(\"name\").notNull(),\n  country: varchar(\"country\").default(\"Other\").notNull(), // ✅ always set\n  profile_image_url: varchar(\"profile_image_url\"),\n  is_admin: boolean(\"is_admin\").default(false).notNull(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n  updated_at: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport type User = typeof users.$inferSelect & { country: string }; // ensure country exists\nexport type InsertUser = typeof users.$inferInsert;\n\n/* =======================================================\n   🧾 Auth Schemas\n   ======================================================= */\nexport const registerUserSchema = z.object({\n  name: z.string().min(2, \"Name is required\"),\n  username: z\n    .string()\n    .min(3, \"Username must be at least 3 characters\")\n    .regex(/^[a-zA-Z0-9_]+$/, \"Username can only contain letters, numbers, and underscores\"),\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  country: z.string().default(\"Other\"), // default to Other if not provided\n  alien: z\n    .string()\n    .regex(/^\\d{2}$/, \"Alien must be 2 digits (e.g. 01, 02, 10)\")\n    .optional(),\n});\n\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\n\nexport const loginUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nexport type LoginUser = z.infer<typeof loginUserSchema>;\n\n/* =======================================================\n   ✈️ Flights Table\n   ======================================================= */\nexport const flights = pgTable(\"flights\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  user_id: uuid(\"user_id\").references(() => users.id).notNull(),\n\n  airline_name: varchar(\"airline_name\").notNull(),\n  airline_code: varchar(\"airline_code\", { length: 3 }).notNull(),\n  flight_number: varchar(\"flight_number\").notNull(),\n\n  departure: varchar(\"departure\").notNull(),\n  arrival: varchar(\"arrival\").notNull(),\n\n  departure_latitude: doublePrecision(\"departure_latitude\"),\n  departure_longitude: doublePrecision(\"departure_longitude\"),\n  arrival_latitude: doublePrecision(\"arrival_latitude\"),\n  arrival_longitude: doublePrecision(\"arrival_longitude\"),\n\n  departure_time: varchar(\"departure_time\"),\n  arrival_time: varchar(\"arrival_time\"),\n  date: varchar(\"date\"), // YYYY-MM-DD\n\n  // ✅ Add terminal columns\n  departure_terminal: varchar(\"departure_terminal\"),\n  arrival_terminal: varchar(\"arrival_terminal\"),\n\n  aircraft_type: varchar(\"aircraft_type\"),\n  distance: doublePrecision(\"distance\"), // km\n  duration: varchar(\"duration\"),\n  status: varchar(\"status\").default(\"scheduled\"),\n\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\n\nexport const insertFlightSchema = createInsertSchema(flights).omit({\n  id: true,\n  user_id: true,\n  created_at: true,\n});\n\nexport type Flight = typeof flights.$inferSelect;\nexport type InsertFlight = z.infer<typeof insertFlightSchema>;\n\n/* =======================================================\n   🏢 Airlines Table\n   ======================================================= */\nexport const airlines = pgTable(\"airlines\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  airline_code: varchar(\"airline_code\", { length: 3 }).unique().notNull(),\n  airline_name: varchar(\"airline_name\").notNull(),\n  country: varchar(\"country\").notNull(),\n  icao: varchar(\"icao\"),\n  iata: varchar(\"iata\"),\n});\n\nexport const insertAirlineSchema = createInsertSchema(airlines);\nexport type Airline = typeof airlines.$inferSelect;\nexport type InsertAirline = z.infer<typeof insertAirlineSchema>;\n\n/* =======================================================\n   🌍 Airports Table\n   ======================================================= */\nexport const airports = pgTable(\"airports\", {\n  id: integer(\"id\").primaryKey(),\n  ident: varchar(\"ident\").unique().notNull(),\n  type: varchar(\"type\"),\n  name: varchar(\"name\"),\n  latitude: doublePrecision(\"latitude\"),\n  longitude: doublePrecision(\"longitude\"),\n  elevation_ft: integer(\"elevation_ft\"),\n  continent: varchar(\"continent\"),\n  iso_country: varchar(\"iso_country\"),\n  iso_region: varchar(\"iso_region\"),\n  municipality: varchar(\"municipality\"),\n  gps_code: varchar(\"gps_code\"),\n  iata: varchar(\"iata\", { length: 3 }),\n  icao: varchar(\"icao\", { length: 4 }),\n  local_code: varchar(\"local_code\"),\n});\n\nexport const insertAirportSchema = createInsertSchema(airports);\nexport type Airport = typeof airports.$inferSelect;\nexport type InsertAirport = z.infer<typeof insertAirportSchema>;\n\n/* =======================================================\n   🏅 Stamps Table\n   ======================================================= */\nexport const stamps = pgTable(\"stamps\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  name: text(\"name\").notNull(),\n  image_url: text(\"image_url\").notNull(),\n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertStampSchema = createInsertSchema(stamps).omit({\n  id: true,\n  created_at: true,\n});\n\nexport type Stamp = typeof stamps.$inferSelect;\nexport type InsertStamp = z.infer<typeof insertStampSchema>;\n\n/* =======================================================\n   🏨 Stay Ins Table\n   ======================================================= */\nexport const stayins = pgTable(\"stayins\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  user_id: uuid(\"user_id\").references(() => users.id).notNull(),\n  \n  check_in: varchar(\"check_in\").notNull(), // Date string\n  check_out: varchar(\"check_out\").notNull(), // Date string\n  \n  country: varchar(\"country\").notNull(),\n  city: varchar(\"city\").notNull(), // Region/City (without Notion links)\n  name: varchar(\"name\").notNull(), // Hotel/Accommodation name\n  maps_pin: text(\"maps_pin\"), // Google Maps link\n  type: varchar(\"type\").notNull().default(\"Hotel\"), // Hotel, Airbnb, Hostel, Motel\n  \n  created_at: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertStayinSchema = createInsertSchema(stayins).omit({\n  id: true,\n  user_id: true,\n  created_at: true,\n});\n\nexport type Stayin = typeof stayins.$inferSelect;\nexport type InsertStayin = z.infer<typeof insertStayinSchema>;\n","size_bytes":7383},"client/src/components/examples/FlightTimeline.tsx":{"content":"import { FlightTimeline as FlightTimelineComponent } from \"../FlightTimeline\";\n\nconst mockFlights = [\n  {\n    id: \"1\",\n    flightNumber: \"184\",\n    airline: \"IGO\",\n    from: \"DEL\",\n    to: \"AMD\",\n    date: \"2022-10-10\",\n    departureTime: \"09:50\",\n    arrivalTime: \"11:20\",\n    aircraftType: \"Airbus A321neo\",\n    status: \"completed\" as const,\n  },\n  {\n    id: \"2\",\n    flightNumber: \"122\",\n    airline: \"FIN\",\n    from: \"DEL\",\n    to: \"HEL\",\n    date: \"2022-09-25\",\n    departureTime: \"07:40\",\n    arrivalTime: \"14:35\",\n    aircraftType: \"Airbus A330-300\",\n    status: \"completed\" as const,\n  },\n  {\n    id: \"3\",\n    flightNumber: \"823\",\n    airline: \"IGO\",\n    from: \"AMD\",\n    to: \"BLR\",\n    date: \"2021-11-07\",\n    departureTime: \"06:00\",\n    arrivalTime: \"08:25\",\n    aircraftType: \"Airbus A321neo\",\n    status: \"completed\" as const,\n  },\n];\n\nexport default function FlightTimelineExample() {\n  return (\n    <div className=\"mx-auto max-w-4xl p-8\">\n      <FlightTimelineComponent flights={mockFlights} />\n    </div>\n  );\n}\n","size_bytes":1027},"client/src/components/SwipeableFlightCard.tsx":{"content":"\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { Trash2 } from \"lucide-react\";\nimport { Card } from \"@/components/ui/card\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SwipeableFlightCardProps {\n  id: string;\n  flightNumber: string;\n  airline: string;\n  airlineName?: string;\n  from: string;\n  to: string;\n  date: string;\n  departureTime?: string;\n  arrivalTime?: string;\n  aircraftType?: string;\n  status: \"completed\" | \"upcoming\" | \"cancelled\";\n}\n\nexport function SwipeableFlightCard(props: SwipeableFlightCardProps) {\n  const [translateX, setTranslateX] = useState(0);\n  const [isSwiping, setIsSwiping] = useState(false);\n  const startX = useRef(0);\n  const currentX = useRef(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  // 🗑️ Delete flight mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/flights/${id}`);\n      if (!res.ok) throw new Error(\"Failed to delete flight\");\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flights\"] });\n      toast({\n        title: \"Flight deleted\",\n        description: \"The flight has been removed from your history.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete flight. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  /* ------------------- Swipe handlers ------------------- */\n  const handleTouchStart = (e: React.TouchEvent) => {\n    startX.current = e.touches[0].clientX;\n    setIsSwiping(true);\n  };\n  const handleTouchMove = (e: React.TouchEvent) => {\n    if (!isSwiping) return;\n    currentX.current = e.touches[0].clientX;\n    const diff = currentX.current - startX.current;\n    if (diff < 0) setTranslateX(Math.max(diff, -100));\n  };\n  const handleTouchEnd = () => {\n    setIsSwiping(false);\n    setTranslateX(translateX < -50 ? -80 : 0);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent) => {\n    startX.current = e.clientX;\n    setIsSwiping(true);\n  };\n  const handleMouseMove = (e: React.MouseEvent) => {\n    if (!isSwiping) return;\n    currentX.current = e.clientX;\n    const diff = currentX.current - startX.current;\n    if (diff < 0) setTranslateX(Math.max(diff, -100));\n  };\n  const handleMouseUp = () => {\n    setIsSwiping(false);\n    setTranslateX(translateX < -50 ? -80 : 0);\n  };\n\n  const handleDelete = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    deleteMutation.mutate(props.id);\n  };\n\n  // Close swipe when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (containerRef.current && !containerRef.current.contains(e.target as Node)) {\n        setTranslateX(0);\n      }\n    };\n    if (translateX < 0) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n      return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }\n  }, [translateX]);\n\n  /* ------------------- Render ------------------- */\n  return (\n    <div ref={containerRef} className=\"relative overflow-hidden\">\n      {/* 🗑️ Delete button background */}\n      <div className=\"absolute right-0 top-0 bottom-0 w-20 flex items-center justify-center bg-red-950/30\">\n        <button\n          onClick={handleDelete}\n          disabled={deleteMutation.isPending}\n          className=\"h-full w-full flex items-center justify-center hover:bg-red-900/30 transition\"\n        >\n          <Trash2 className=\"h-6 w-6 text-red-500\" />\n        </button>\n      </div>\n\n      {/* ✈️ Swipeable flight card */}\n      <div\n        style={{\n          transform: `translateX(${translateX}px)`,\n          transition: isSwiping ? \"none\" : \"transform 0.25s ease-out\",\n        }}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseUp}\n      >\n        <Card className=\"p-4 bg-background border border-border cursor-pointer\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h3 className=\"text-lg font-semibold text-foreground\">\n                {props.from} → {props.to}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">\n                {props.airlineName || props.airline} {props.flightNumber}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">{props.date}</p>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"font-mono text-sm\">\n                {props.departureTime || \"--:--\"} → {props.arrivalTime || \"--:--\"}\n              </p>\n              <p\n                className={`text-xs font-medium capitalize ${\n                  props.status === \"completed\"\n                    ? \"text-green-400\"\n                    : props.status === \"upcoming\"\n                    ? \"text-blue-400\"\n                    : \"text-red-400\"\n                }`}\n              >\n                {props.status}\n              </p>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5402}},"version":2}